/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from "../base";
// @ts-ignore
import { BadRequest } from "../models";
// @ts-ignore
import { CreateBusinessCubixAccountResponse } from "../models";
// @ts-ignore
import { CubixFiatAccountCreationRequest } from "../models";
// @ts-ignore
import { GetBusinessCubixAccountResponse } from "../models";
// @ts-ignore
import { ListBusinessCubixAccountInstructionsResponse } from "../models";
// @ts-ignore
import { ListBusinessCubixAccountsResponse } from "../models";
// @ts-ignore
import { NotAuthorized } from "../models";
// @ts-ignore
import { NotFound } from "../models";
/**
 * CUBIXApi - axios parameter creator
 * @export
 */
export const CUBIXApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create a CUBIX bank account
     * @param {CubixFiatAccountCreationRequest} [cubixFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessCubixAccount: async (
      cubixFiatAccountCreationRequest?: CubixFiatAccountCreationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/businessAccount/banks/cubix`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cubixFiatAccountCreationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get a CUBIX bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessCubixAccount: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getBusinessCubixAccount", "id", id);
      const localVarPath = `/v1/businessAccount/banks/cubix/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get the CUBIX transfer instructions into the Circle bank account given your fiat account id.
     * @summary Get CUBIX instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessCubixAccountInstructions: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getBusinessCubixAccountInstructions", "id", id);
      const localVarPath =
        `/v1/businessAccount/banks/cubix/{id}/instructions`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary List all CUBIX bank accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBusinessCubixAccounts: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/businessAccount/banks/cubix`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * CUBIXApi - functional programming interface
 * @export
 */
export const CUBIXApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CUBIXApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create a CUBIX bank account
     * @param {CubixFiatAccountCreationRequest} [cubixFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBusinessCubixAccount(
      cubixFiatAccountCreationRequest?: CubixFiatAccountCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateBusinessCubixAccountResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createBusinessCubixAccount(
          cubixFiatAccountCreationRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a CUBIX bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusinessCubixAccount(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBusinessCubixAccountResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getBusinessCubixAccount(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get the CUBIX transfer instructions into the Circle bank account given your fiat account id.
     * @summary Get CUBIX instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusinessCubixAccountInstructions(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListBusinessCubixAccountInstructionsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getBusinessCubixAccountInstructions(
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary List all CUBIX bank accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listBusinessCubixAccounts(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListBusinessCubixAccountsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listBusinessCubixAccounts(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};

/**
 * CUBIXApi - factory interface
 * @export
 */
export const CUBIXApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CUBIXApiFp(configuration);
  return {
    /**
     *
     * @summary Create a CUBIX bank account
     * @param {CubixFiatAccountCreationRequest} [cubixFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessCubixAccount(
      cubixFiatAccountCreationRequest?: CubixFiatAccountCreationRequest,
      options?: any
    ): AxiosPromise<CreateBusinessCubixAccountResponse> {
      return localVarFp
        .createBusinessCubixAccount(cubixFiatAccountCreationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a CUBIX bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessCubixAccount(
      id: string,
      options?: any
    ): AxiosPromise<GetBusinessCubixAccountResponse> {
      return localVarFp
        .getBusinessCubixAccount(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get the CUBIX transfer instructions into the Circle bank account given your fiat account id.
     * @summary Get CUBIX instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessCubixAccountInstructions(
      id: string,
      options?: any
    ): AxiosPromise<ListBusinessCubixAccountInstructionsResponse> {
      return localVarFp
        .getBusinessCubixAccountInstructions(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List all CUBIX bank accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBusinessCubixAccounts(
      options?: any
    ): AxiosPromise<ListBusinessCubixAccountsResponse> {
      return localVarFp
        .listBusinessCubixAccounts(options)
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * CUBIXApi - object-oriented interface
 * @export
 * @class CUBIXApi
 * @extends {BaseAPI}
 */
export class CUBIXApi extends BaseAPI {
  /**
   *
   * @summary Create a CUBIX bank account
   * @param {CubixFiatAccountCreationRequest} [cubixFiatAccountCreationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CUBIXApi
   */
  public createBusinessCubixAccount(
    cubixFiatAccountCreationRequest?: CubixFiatAccountCreationRequest,
    options?: AxiosRequestConfig
  ) {
    return CUBIXApiFp(this.configuration)
      .createBusinessCubixAccount(cubixFiatAccountCreationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a CUBIX bank account
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CUBIXApi
   */
  public getBusinessCubixAccount(id: string, options?: AxiosRequestConfig) {
    return CUBIXApiFp(this.configuration)
      .getBusinessCubixAccount(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get the CUBIX transfer instructions into the Circle bank account given your fiat account id.
   * @summary Get CUBIX instructions
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CUBIXApi
   */
  public getBusinessCubixAccountInstructions(
    id: string,
    options?: AxiosRequestConfig
  ) {
    return CUBIXApiFp(this.configuration)
      .getBusinessCubixAccountInstructions(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List all CUBIX bank accounts.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CUBIXApi
   */
  public listBusinessCubixAccounts(options?: AxiosRequestConfig) {
    return CUBIXApiFp(this.configuration)
      .listBusinessCubixAccounts(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
