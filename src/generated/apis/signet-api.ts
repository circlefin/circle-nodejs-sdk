/* tslint:disable */
/* eslint-disable */
/**
 * All Circle APIs
 * Circle\'s General, Core Functionality, Payments, Payouts, and Accounts APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from "../base";
// @ts-ignore
import { BadRequest } from "../models";
// @ts-ignore
import { CreateBusinessAccountSignetBankAccountResponse } from "../models";
// @ts-ignore
import { GetBusinessAccountSignetBankAccountResponse } from "../models";
// @ts-ignore
import { GetBusinessAccountSignetBankAccountsResponse } from "../models";
// @ts-ignore
import { GetBusinessAccountSignetInstructionsBankAccountResponse } from "../models";
// @ts-ignore
import { NotAuthorized } from "../models";
// @ts-ignore
import { NotFound } from "../models";
// @ts-ignore
import { SignetFiatAccountCreationRequest } from "../models";
/**
 * SignetApi - axios parameter creator
 * @export
 */
export const SignetApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create a Signet bank account (Production Only)
     * @param {SignetFiatAccountCreationRequest} [signetFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessAccountSignetBankAccount: async (
      signetFiatAccountCreationRequest?: SignetFiatAccountCreationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/businessAccount/banks/signet`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signetFiatAccountCreationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get a Signet bank account (Production Only)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessAccountSignetBankAccount: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getBusinessAccountSignetBankAccount", "id", id);
      const localVarPath = `/v1/businessAccount/banks/signet/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary List all Signet bank accounts (Production Only).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessAccountSignetBankAccounts: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/businessAccount/banks/signet`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get the Signet transfer instructions into the Circle bank account given your bank account id (only available on Production now).
     * @summary Get Signet instructions (Production Only)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessAccountSignetInstructionsBankAccount: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "getBusinessAccountSignetInstructionsBankAccount",
        "id",
        id
      );
      const localVarPath =
        `/v1/businessAccount/banks/signet/{id}/instructions`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * SignetApi - functional programming interface
 * @export
 */
export const SignetApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SignetApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create a Signet bank account (Production Only)
     * @param {SignetFiatAccountCreationRequest} [signetFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBusinessAccountSignetBankAccount(
      signetFiatAccountCreationRequest?: SignetFiatAccountCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateBusinessAccountSignetBankAccountResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createBusinessAccountSignetBankAccount(
          signetFiatAccountCreationRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a Signet bank account (Production Only)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusinessAccountSignetBankAccount(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBusinessAccountSignetBankAccountResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getBusinessAccountSignetBankAccount(
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary List all Signet bank accounts (Production Only).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusinessAccountSignetBankAccounts(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBusinessAccountSignetBankAccountsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getBusinessAccountSignetBankAccounts(
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get the Signet transfer instructions into the Circle bank account given your bank account id (only available on Production now).
     * @summary Get Signet instructions (Production Only)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusinessAccountSignetInstructionsBankAccount(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBusinessAccountSignetInstructionsBankAccountResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getBusinessAccountSignetInstructionsBankAccount(
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};

/**
 * SignetApi - factory interface
 * @export
 */
export const SignetApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SignetApiFp(configuration);
  return {
    /**
     *
     * @summary Create a Signet bank account (Production Only)
     * @param {SignetFiatAccountCreationRequest} [signetFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessAccountSignetBankAccount(
      signetFiatAccountCreationRequest?: SignetFiatAccountCreationRequest,
      options?: any
    ): AxiosPromise<CreateBusinessAccountSignetBankAccountResponse> {
      return localVarFp
        .createBusinessAccountSignetBankAccount(
          signetFiatAccountCreationRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a Signet bank account (Production Only)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessAccountSignetBankAccount(
      id: string,
      options?: any
    ): AxiosPromise<GetBusinessAccountSignetBankAccountResponse> {
      return localVarFp
        .getBusinessAccountSignetBankAccount(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List all Signet bank accounts (Production Only).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessAccountSignetBankAccounts(
      options?: any
    ): AxiosPromise<GetBusinessAccountSignetBankAccountsResponse> {
      return localVarFp
        .getBusinessAccountSignetBankAccounts(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get the Signet transfer instructions into the Circle bank account given your bank account id (only available on Production now).
     * @summary Get Signet instructions (Production Only)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessAccountSignetInstructionsBankAccount(
      id: string,
      options?: any
    ): AxiosPromise<GetBusinessAccountSignetInstructionsBankAccountResponse> {
      return localVarFp
        .getBusinessAccountSignetInstructionsBankAccount(id, options)
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * SignetApi - object-oriented interface
 * @export
 * @class SignetApi
 * @extends {BaseAPI}
 */
export class SignetApi extends BaseAPI {
  /**
   *
   * @summary Create a Signet bank account (Production Only)
   * @param {SignetFiatAccountCreationRequest} [signetFiatAccountCreationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignetApi
   */
  public createBusinessAccountSignetBankAccount(
    signetFiatAccountCreationRequest?: SignetFiatAccountCreationRequest,
    options?: AxiosRequestConfig
  ) {
    return SignetApiFp(this.configuration)
      .createBusinessAccountSignetBankAccount(
        signetFiatAccountCreationRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a Signet bank account (Production Only)
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignetApi
   */
  public getBusinessAccountSignetBankAccount(
    id: string,
    options?: AxiosRequestConfig
  ) {
    return SignetApiFp(this.configuration)
      .getBusinessAccountSignetBankAccount(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List all Signet bank accounts (Production Only).
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignetApi
   */
  public getBusinessAccountSignetBankAccounts(options?: AxiosRequestConfig) {
    return SignetApiFp(this.configuration)
      .getBusinessAccountSignetBankAccounts(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get the Signet transfer instructions into the Circle bank account given your bank account id (only available on Production now).
   * @summary Get Signet instructions (Production Only)
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignetApi
   */
  public getBusinessAccountSignetInstructionsBankAccount(
    id: string,
    options?: AxiosRequestConfig
  ) {
    return SignetApiFp(this.configuration)
      .getBusinessAccountSignetInstructionsBankAccount(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
