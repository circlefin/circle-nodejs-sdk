/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from "../base";
// @ts-ignore
import { AddressBookRecipientModifyRequest } from "../models";
// @ts-ignore
import { AddressBookRecipientRequest } from "../models";
// @ts-ignore
import { BadRequest } from "../models";
// @ts-ignore
import { CreateAddressBookRecipientResponse } from "../models";
// @ts-ignore
import { GetAddressBookRecipientResponse } from "../models";
// @ts-ignore
import { ListAddressBookRecipientsResponse } from "../models";
// @ts-ignore
import { ModifyAddressBookRecipientResponse } from "../models";
// @ts-ignore
import { NotAuthorized } from "../models";
// @ts-ignore
import { NotFound } from "../models";
/**
 * CryptoAddressBookApi - axios parameter creator
 * @export
 */
export const CryptoAddressBookApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create a recipient
     * @param {AddressBookRecipientRequest} [addressBookRecipientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAddressBookRecipient: async (
      addressBookRecipientRequest?: AddressBookRecipientRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/addressBook/recipients`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        addressBookRecipientRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Delete a recipient
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAddressBookRecipient: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteAddressBookRecipient", "id", id);
      const localVarPath = `/v1/addressBook/recipients/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get a recipient
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressBookRecipient: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getAddressBookRecipient", "id", id);
      const localVarPath = `/v1/addressBook/recipients/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary List all recipients
     * @param {string} [address] Filters results to fetch only address book recipients with the provided address.
     * @param {string} [chain] Filters results to fetch only address book recipients with the provided chain.
     * @param {string} [email] Filters results to fetch only address book recipients that have the provided email in their metadata.
     * @param {'pending' | 'inactive' | 'active' | 'denied'} [status] Filters results to fetch only address book recipients that have the provided status.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAddressBookRecipients: async (
      address?: string,
      chain?: string,
      email?: string,
      status?: "pending" | "inactive" | "active" | "denied",
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/addressBook/recipients`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (address !== undefined) {
        localVarQueryParameter["address"] = address;
      }

      if (chain !== undefined) {
        localVarQueryParameter["chain"] = chain;
      }

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      if (from !== undefined) {
        localVarQueryParameter["from"] =
          (from as any) instanceof Date ? (from as any).toISOString() : from;
      }

      if (to !== undefined) {
        localVarQueryParameter["to"] =
          (to as any) instanceof Date ? (to as any).toISOString() : to;
      }

      if (pageBefore !== undefined) {
        localVarQueryParameter["pageBefore"] = pageBefore;
      }

      if (pageAfter !== undefined) {
        localVarQueryParameter["pageAfter"] = pageAfter;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Modify a recipient
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {AddressBookRecipientModifyRequest} [addressBookRecipientModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyAddressBookRecipient: async (
      id: string,
      addressBookRecipientModifyRequest?: AddressBookRecipientModifyRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("modifyAddressBookRecipient", "id", id);
      const localVarPath = `/v1/addressBook/recipients/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        addressBookRecipientModifyRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * CryptoAddressBookApi - functional programming interface
 * @export
 */
export const CryptoAddressBookApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CryptoAddressBookApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create a recipient
     * @param {AddressBookRecipientRequest} [addressBookRecipientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAddressBookRecipient(
      addressBookRecipientRequest?: AddressBookRecipientRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateAddressBookRecipientResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createAddressBookRecipient(
          addressBookRecipientRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete a recipient
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAddressBookRecipient(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteAddressBookRecipient(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a recipient
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAddressBookRecipient(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetAddressBookRecipientResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAddressBookRecipient(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary List all recipients
     * @param {string} [address] Filters results to fetch only address book recipients with the provided address.
     * @param {string} [chain] Filters results to fetch only address book recipients with the provided chain.
     * @param {string} [email] Filters results to fetch only address book recipients that have the provided email in their metadata.
     * @param {'pending' | 'inactive' | 'active' | 'denied'} [status] Filters results to fetch only address book recipients that have the provided status.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listAddressBookRecipients(
      address?: string,
      chain?: string,
      email?: string,
      status?: "pending" | "inactive" | "active" | "denied",
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListAddressBookRecipientsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listAddressBookRecipients(
          address,
          chain,
          email,
          status,
          from,
          to,
          pageBefore,
          pageAfter,
          pageSize,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Modify a recipient
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {AddressBookRecipientModifyRequest} [addressBookRecipientModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modifyAddressBookRecipient(
      id: string,
      addressBookRecipientModifyRequest?: AddressBookRecipientModifyRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ModifyAddressBookRecipientResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.modifyAddressBookRecipient(
          id,
          addressBookRecipientModifyRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};

/**
 * CryptoAddressBookApi - factory interface
 * @export
 */
export const CryptoAddressBookApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CryptoAddressBookApiFp(configuration);
  return {
    /**
     *
     * @summary Create a recipient
     * @param {AddressBookRecipientRequest} [addressBookRecipientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAddressBookRecipient(
      addressBookRecipientRequest?: AddressBookRecipientRequest,
      options?: any
    ): AxiosPromise<CreateAddressBookRecipientResponse> {
      return localVarFp
        .createAddressBookRecipient(addressBookRecipientRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a recipient
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAddressBookRecipient(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteAddressBookRecipient(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a recipient
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressBookRecipient(
      id: string,
      options?: any
    ): AxiosPromise<GetAddressBookRecipientResponse> {
      return localVarFp
        .getAddressBookRecipient(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List all recipients
     * @param {string} [address] Filters results to fetch only address book recipients with the provided address.
     * @param {string} [chain] Filters results to fetch only address book recipients with the provided chain.
     * @param {string} [email] Filters results to fetch only address book recipients that have the provided email in their metadata.
     * @param {'pending' | 'inactive' | 'active' | 'denied'} [status] Filters results to fetch only address book recipients that have the provided status.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAddressBookRecipients(
      address?: string,
      chain?: string,
      email?: string,
      status?: "pending" | "inactive" | "active" | "denied",
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: any
    ): AxiosPromise<ListAddressBookRecipientsResponse> {
      return localVarFp
        .listAddressBookRecipients(
          address,
          chain,
          email,
          status,
          from,
          to,
          pageBefore,
          pageAfter,
          pageSize,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Modify a recipient
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {AddressBookRecipientModifyRequest} [addressBookRecipientModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyAddressBookRecipient(
      id: string,
      addressBookRecipientModifyRequest?: AddressBookRecipientModifyRequest,
      options?: any
    ): AxiosPromise<ModifyAddressBookRecipientResponse> {
      return localVarFp
        .modifyAddressBookRecipient(
          id,
          addressBookRecipientModifyRequest,
          options
        )
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * CryptoAddressBookApi - object-oriented interface
 * @export
 * @class CryptoAddressBookApi
 * @extends {BaseAPI}
 */
export class CryptoAddressBookApi extends BaseAPI {
  /**
   *
   * @summary Create a recipient
   * @param {AddressBookRecipientRequest} [addressBookRecipientRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CryptoAddressBookApi
   */
  public createAddressBookRecipient(
    addressBookRecipientRequest?: AddressBookRecipientRequest,
    options?: AxiosRequestConfig
  ) {
    return CryptoAddressBookApiFp(this.configuration)
      .createAddressBookRecipient(addressBookRecipientRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a recipient
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CryptoAddressBookApi
   */
  public deleteAddressBookRecipient(id: string, options?: AxiosRequestConfig) {
    return CryptoAddressBookApiFp(this.configuration)
      .deleteAddressBookRecipient(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a recipient
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CryptoAddressBookApi
   */
  public getAddressBookRecipient(id: string, options?: AxiosRequestConfig) {
    return CryptoAddressBookApiFp(this.configuration)
      .getAddressBookRecipient(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List all recipients
   * @param {string} [address] Filters results to fetch only address book recipients with the provided address.
   * @param {string} [chain] Filters results to fetch only address book recipients with the provided chain.
   * @param {string} [email] Filters results to fetch only address book recipients that have the provided email in their metadata.
   * @param {'pending' | 'inactive' | 'active' | 'denied'} [status] Filters results to fetch only address book recipients that have the provided status.
   * @param {string} [from] Queries items created since the specified date-time (inclusive).
   * @param {string} [to] Queries items created before the specified date-time (inclusive).
   * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
   * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
   * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CryptoAddressBookApi
   */
  public listAddressBookRecipients(
    address?: string,
    chain?: string,
    email?: string,
    status?: "pending" | "inactive" | "active" | "denied",
    from?: string,
    to?: string,
    pageBefore?: string,
    pageAfter?: string,
    pageSize?: number,
    options?: AxiosRequestConfig
  ) {
    return CryptoAddressBookApiFp(this.configuration)
      .listAddressBookRecipients(
        address,
        chain,
        email,
        status,
        from,
        to,
        pageBefore,
        pageAfter,
        pageSize,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Modify a recipient
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {AddressBookRecipientModifyRequest} [addressBookRecipientModifyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CryptoAddressBookApi
   */
  public modifyAddressBookRecipient(
    id: string,
    addressBookRecipientModifyRequest?: AddressBookRecipientModifyRequest,
    options?: AxiosRequestConfig
  ) {
    return CryptoAddressBookApiFp(this.configuration)
      .modifyAddressBookRecipient(
        id,
        addressBookRecipientModifyRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
