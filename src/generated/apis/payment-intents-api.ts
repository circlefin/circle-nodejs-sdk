/* tslint:disable */
/* eslint-disable */
/**
 * All Circle APIs
 * Circle\'s General, Core Functionality, Payments, Payouts, and Accounts APIs bundled into one OpenAPI Specification.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from "../base";
// @ts-ignore
import { BadRequest } from "../models";
// @ts-ignore
import { CreatePaymentIntentResponse } from "../models";
// @ts-ignore
import { ExpirePaymentIntentResponse } from "../models";
// @ts-ignore
import { GetPaymentIntentResponse } from "../models";
// @ts-ignore
import { GetPaymentIntentsResponse } from "../models";
// @ts-ignore
import { NotAuthorized } from "../models";
// @ts-ignore
import { NotFound } from "../models";
// @ts-ignore
import { PaymentIntent } from "../models";
/**
 * PaymentIntentsApi - axios parameter creator
 * @export
 */
export const PaymentIntentsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create a payment intent
     * @param {PaymentIntent} [paymentIntent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentIntent: async (
      paymentIntent?: PaymentIntent,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/paymentIntents`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        paymentIntent,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Expire a payment intent
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    expirePaymentIntent: async (
      id: string,
      body?: object,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("expirePaymentIntent", "id", id);
      const localVarPath = `/v1/paymentIntents/{id}/expire`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get a payment intent
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentIntent: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPaymentIntent", "id", id);
      const localVarPath = `/v1/paymentIntents/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary List all payment intents
     * @param {'created' | 'pending' | 'complete' | 'expired' | 'failed'} [status] Filters by the most recent &#x60;timeline.status&#x60; within the payment intent.
     * @param {'underpaid' | 'paid' | 'overpaid'} [context] Filters by the most recent &#x60;timeline.context&#x60; within the payment intent.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentIntents: async (
      status?: "created" | "pending" | "complete" | "expired" | "failed",
      context?: "underpaid" | "paid" | "overpaid",
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/paymentIntents`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      if (context !== undefined) {
        localVarQueryParameter["context"] = context;
      }

      if (from !== undefined) {
        localVarQueryParameter["from"] =
          (from as any) instanceof Date ? (from as any).toISOString() : from;
      }

      if (to !== undefined) {
        localVarQueryParameter["to"] =
          (to as any) instanceof Date ? (to as any).toISOString() : to;
      }

      if (pageBefore !== undefined) {
        localVarQueryParameter["pageBefore"] = pageBefore;
      }

      if (pageAfter !== undefined) {
        localVarQueryParameter["pageAfter"] = pageAfter;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * PaymentIntentsApi - functional programming interface
 * @export
 */
export const PaymentIntentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PaymentIntentsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create a payment intent
     * @param {PaymentIntent} [paymentIntent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPaymentIntent(
      paymentIntent?: PaymentIntent,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreatePaymentIntentResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createPaymentIntent(
          paymentIntent,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Expire a payment intent
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async expirePaymentIntent(
      id: string,
      body?: object,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ExpirePaymentIntentResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.expirePaymentIntent(id, body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a payment intent
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPaymentIntent(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetPaymentIntentResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPaymentIntent(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary List all payment intents
     * @param {'created' | 'pending' | 'complete' | 'expired' | 'failed'} [status] Filters by the most recent &#x60;timeline.status&#x60; within the payment intent.
     * @param {'underpaid' | 'paid' | 'overpaid'} [context] Filters by the most recent &#x60;timeline.context&#x60; within the payment intent.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPaymentIntents(
      status?: "created" | "pending" | "complete" | "expired" | "failed",
      context?: "underpaid" | "paid" | "overpaid",
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetPaymentIntentsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPaymentIntents(
          status,
          context,
          from,
          to,
          pageBefore,
          pageAfter,
          pageSize,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};

/**
 * PaymentIntentsApi - factory interface
 * @export
 */
export const PaymentIntentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PaymentIntentsApiFp(configuration);
  return {
    /**
     *
     * @summary Create a payment intent
     * @param {PaymentIntent} [paymentIntent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentIntent(
      paymentIntent?: PaymentIntent,
      options?: any
    ): AxiosPromise<CreatePaymentIntentResponse> {
      return localVarFp
        .createPaymentIntent(paymentIntent, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Expire a payment intent
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    expirePaymentIntent(
      id: string,
      body?: object,
      options?: any
    ): AxiosPromise<ExpirePaymentIntentResponse> {
      return localVarFp
        .expirePaymentIntent(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a payment intent
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentIntent(
      id: string,
      options?: any
    ): AxiosPromise<GetPaymentIntentResponse> {
      return localVarFp
        .getPaymentIntent(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List all payment intents
     * @param {'created' | 'pending' | 'complete' | 'expired' | 'failed'} [status] Filters by the most recent &#x60;timeline.status&#x60; within the payment intent.
     * @param {'underpaid' | 'paid' | 'overpaid'} [context] Filters by the most recent &#x60;timeline.context&#x60; within the payment intent.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentIntents(
      status?: "created" | "pending" | "complete" | "expired" | "failed",
      context?: "underpaid" | "paid" | "overpaid",
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: any
    ): AxiosPromise<GetPaymentIntentsResponse> {
      return localVarFp
        .getPaymentIntents(
          status,
          context,
          from,
          to,
          pageBefore,
          pageAfter,
          pageSize,
          options
        )
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * PaymentIntentsApi - object-oriented interface
 * @export
 * @class PaymentIntentsApi
 * @extends {BaseAPI}
 */
export class PaymentIntentsApi extends BaseAPI {
  /**
   *
   * @summary Create a payment intent
   * @param {PaymentIntent} [paymentIntent]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentIntentsApi
   */
  public createPaymentIntent(
    paymentIntent?: PaymentIntent,
    options?: AxiosRequestConfig
  ) {
    return PaymentIntentsApiFp(this.configuration)
      .createPaymentIntent(paymentIntent, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Expire a payment intent
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentIntentsApi
   */
  public expirePaymentIntent(
    id: string,
    body?: object,
    options?: AxiosRequestConfig
  ) {
    return PaymentIntentsApiFp(this.configuration)
      .expirePaymentIntent(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a payment intent
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentIntentsApi
   */
  public getPaymentIntent(id: string, options?: AxiosRequestConfig) {
    return PaymentIntentsApiFp(this.configuration)
      .getPaymentIntent(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List all payment intents
   * @param {'created' | 'pending' | 'complete' | 'expired' | 'failed'} [status] Filters by the most recent &#x60;timeline.status&#x60; within the payment intent.
   * @param {'underpaid' | 'paid' | 'overpaid'} [context] Filters by the most recent &#x60;timeline.context&#x60; within the payment intent.
   * @param {string} [from] Queries items created since the specified date-time (inclusive).
   * @param {string} [to] Queries items created before the specified date-time (inclusive).
   * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
   * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
   * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentIntentsApi
   */
  public getPaymentIntents(
    status?: "created" | "pending" | "complete" | "expired" | "failed",
    context?: "underpaid" | "paid" | "overpaid",
    from?: string,
    to?: string,
    pageBefore?: string,
    pageAfter?: string,
    pageSize?: number,
    options?: AxiosRequestConfig
  ) {
    return PaymentIntentsApiFp(this.configuration)
      .getPaymentIntents(
        status,
        context,
        from,
        to,
        pageBefore,
        pageAfter,
        pageSize,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
