/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from "../base";
// @ts-ignore
import { BadRequest } from "../models";
// @ts-ignore
import { CreateBusinessWireAccountResponse } from "../models";
// @ts-ignore
import { GetBusinessWireAccountInstructionsResponse } from "../models";
// @ts-ignore
import { GetBusinessWireAccountResponse } from "../models";
// @ts-ignore
import { ListBusinessWireAccountsResponse } from "../models";
// @ts-ignore
import { NotAuthorized } from "../models";
// @ts-ignore
import { NotFound } from "../models";
// @ts-ignore
import { WireCreationRequest } from "../models";
/**
 * WiresApi - axios parameter creator
 * @export
 */
export const WiresApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create a Wire bank account
     * @param {WireCreationRequest} [wireCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessWireAccount: async (
      wireCreationRequest?: WireCreationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/businessAccount/banks/wires`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        wireCreationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get a Wire bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessWireAccount: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getBusinessWireAccount", "id", id);
      const localVarPath = `/v1/businessAccount/banks/wires/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get the wire transfer instructions into the Circle bank account given your bank account id.
     * @summary Get Wire instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {'USD' | 'EUR'} [currency] Queries beneficiary bank account currency. Default is USD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessWireAccountInstructions: async (
      id: string,
      currency?: "USD" | "EUR",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getBusinessWireAccountInstructions", "id", id);
      const localVarPath =
        `/v1/businessAccount/banks/wires/{id}/instructions`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (currency !== undefined) {
        localVarQueryParameter["currency"] = currency;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary List all Wire bank accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBusinessWireAccounts: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/businessAccount/banks/wires`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * WiresApi - functional programming interface
 * @export
 */
export const WiresApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WiresApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create a Wire bank account
     * @param {WireCreationRequest} [wireCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBusinessWireAccount(
      wireCreationRequest?: WireCreationRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateBusinessWireAccountResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createBusinessWireAccount(
          wireCreationRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a Wire bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusinessWireAccount(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBusinessWireAccountResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getBusinessWireAccount(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get the wire transfer instructions into the Circle bank account given your bank account id.
     * @summary Get Wire instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {'USD' | 'EUR'} [currency] Queries beneficiary bank account currency. Default is USD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusinessWireAccountInstructions(
      id: string,
      currency?: "USD" | "EUR",
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBusinessWireAccountInstructionsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getBusinessWireAccountInstructions(
          id,
          currency,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary List all Wire bank accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listBusinessWireAccounts(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListBusinessWireAccountsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listBusinessWireAccounts(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};

/**
 * WiresApi - factory interface
 * @export
 */
export const WiresApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = WiresApiFp(configuration);
  return {
    /**
     *
     * @summary Create a Wire bank account
     * @param {WireCreationRequest} [wireCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessWireAccount(
      wireCreationRequest?: WireCreationRequest,
      options?: any
    ): AxiosPromise<CreateBusinessWireAccountResponse> {
      return localVarFp
        .createBusinessWireAccount(wireCreationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a Wire bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessWireAccount(
      id: string,
      options?: any
    ): AxiosPromise<GetBusinessWireAccountResponse> {
      return localVarFp
        .getBusinessWireAccount(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get the wire transfer instructions into the Circle bank account given your bank account id.
     * @summary Get Wire instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {'USD' | 'EUR'} [currency] Queries beneficiary bank account currency. Default is USD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessWireAccountInstructions(
      id: string,
      currency?: "USD" | "EUR",
      options?: any
    ): AxiosPromise<GetBusinessWireAccountInstructionsResponse> {
      return localVarFp
        .getBusinessWireAccountInstructions(id, currency, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List all Wire bank accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBusinessWireAccounts(
      options?: any
    ): AxiosPromise<ListBusinessWireAccountsResponse> {
      return localVarFp
        .listBusinessWireAccounts(options)
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * WiresApi - object-oriented interface
 * @export
 * @class WiresApi
 * @extends {BaseAPI}
 */
export class WiresApi extends BaseAPI {
  /**
   *
   * @summary Create a Wire bank account
   * @param {WireCreationRequest} [wireCreationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WiresApi
   */
  public createBusinessWireAccount(
    wireCreationRequest?: WireCreationRequest,
    options?: AxiosRequestConfig
  ) {
    return WiresApiFp(this.configuration)
      .createBusinessWireAccount(wireCreationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a Wire bank account
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WiresApi
   */
  public getBusinessWireAccount(id: string, options?: AxiosRequestConfig) {
    return WiresApiFp(this.configuration)
      .getBusinessWireAccount(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get the wire transfer instructions into the Circle bank account given your bank account id.
   * @summary Get Wire instructions
   * @param {string} id Universally unique identifier (UUID v4) of a resource.
   * @param {'USD' | 'EUR'} [currency] Queries beneficiary bank account currency. Default is USD.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WiresApi
   */
  public getBusinessWireAccountInstructions(
    id: string,
    currency?: "USD" | "EUR",
    options?: AxiosRequestConfig
  ) {
    return WiresApiFp(this.configuration)
      .getBusinessWireAccountInstructions(id, currency, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List all Wire bank accounts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WiresApi
   */
  public listBusinessWireAccounts(options?: AxiosRequestConfig) {
    return WiresApiFp(this.configuration)
      .listBusinessWireAccounts(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
