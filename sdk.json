{
  "openapi": "3.0.2",
  "servers": [
    {
      "url": "api-sandbox.circle.com"
    }
  ],
  "info": {
    "version": "1.0.3",
    "title": "All Circle APIs",
    "description": "Circle's General, Core Functionality, Payments, Payouts, and Accounts APIs bundled into one OpenAPI Specification."
  },
  "tags": [
    {
      "name": "Health"
    },
    {
      "name": "Management"
    },
    {
      "name": "Encryption"
    },
    {
      "name": "Subscriptions"
    },
    {
      "name": "Stablecoins"
    },
    {
      "name": "Channels"
    },
    {
      "name": "Balances"
    },
    {
      "name": "Addresses"
    },
    {
      "name": "Cards"
    },
    {
      "name": "Wires"
    },
    {
      "name": "SEN"
    },
    {
      "name": "SEPA"
    },
    {
      "name": "ACH"
    },
    {
      "name": "Signet"
    },
    {
      "name": "Deposits"
    },
    {
      "name": "Payment Intents"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Settlements"
    },
    {
      "name": "Chargebacks"
    },
    {
      "name": "Reversals"
    },
    {
      "name": "Payouts"
    },
    {
      "name": "Returns"
    },
    {
      "name": "Wallets"
    },
    {
      "name": "Transfers"
    }
  ],
  "paths": {
    "/ping": {
      "get": {
        "summary": "Ping",
        "description": "Checks that the service is running.",
        "operationId": "ping",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Successful ping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ping"
                },
                "examples": {
                  "response": {
                    "value": {
                      "message": "pong"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/configuration": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get configuration info",
        "description": "Retrieves general configuration information.",
        "operationId": "getAccountConfig",
        "tags": [
          "Management"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved configuration information.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetConfigResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AccountConfiguration"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "payments": {
                          "masterWalletId": "212000"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/encryption/public": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get public key",
        "description": "Retrieves an RSA public key to be used in encrypting data sent to the API. Your public keys change infrequently, so we encourage you to cache this response value locally for a duration of 24 hours or more.",
        "operationId": "getPublicKey",
        "tags": [
          "Encryption"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the RSA public key.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetPublicKeyResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PublicKey"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "keyId": "key1",
                        "publicKey": "LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tClZlcnNpb246IEJDUEcgdjEuNTQKCm1RRU5CRjAxdmk0QkNBQ3JzMDNLS1Y0Qk9SRkYyT0Z4bUdvb0UyaTZMbnNneE5UL1dsV2s1ZTl2RDd2NENkSm0KcGJJbENmZ0U4WFlnYmhKUTE4YStaTzlPM0RFYUp2dGhJSEtjL0l1UEIvZmdEYUJUT285NkJzL2pVRFp6ZGxaVApQazNFUjliNFZPeGVwMFNPSHFMcmxTVFY4ZXB3M1R3SEdaL3NpSWdBYXEwRGdJdlZxUTY4TGVaMnorUFJWZm04CmhhSnJpb05SRU5Ja2ZNTWY5aFdySlowSW1zUk1aVmpDMVVrd2FSSHdrTTMwQUlia1dYcFJ5R205SXhQaXdGa08Kb1RnWlpwUFpsdVczckdkWER0NHZqL24za09hczV1dFdoNFovMlhjWHBiSUUyU0FPK0hycUdIclRnK1ZmZ05JNwpZcVZqYW5MOEN1bm83UkxmcDhKZlZDNXBLUm5ySVNCTnphN1ZBQkVCQUFHMEJrTnBjbU5zWllrQkhBUVFBUWtBCkJnVUNYVFcrTGdBS0NSQ3EzaHNwWjBMeGEwdnpCLzQvQTJpdk1CWW1aZXV2bEJZMm5ZZnNXek9Sb28vU3BIYkQKY2Y0UmtxZzZ0RERJSkUzNHhDVit0MzJydmJkM0ZOdVZseWs1MDVZRkpESnI4cVc2S0tkQVRXdU16eW5mMVVoUAo1M25hTlc0cXdrdSt3b0RWWjJpci9lUVI1WUc4L0RGcnd3bXdaa0dRd0Ftc3h5ZHd5anBnLzBrQ3lpZHkxdVBkCmVVWGgwdWt4dS9Dais4UFl5cHcwdit5V2tzbjdSZ2dVbkJFMWhiQ2pEV3FweHZjMEpDNVAxdmx6L2xRcWQrR3oKRC9Td1FJTVdRVElnV3BHRVVvQTRDc3drbU5PdHhsRVF1U0tueXNtTG02S0ExUmRhTzd6V2IrdWNLN21FZ2VoSwpXU2hHZExqRVNNZlVRUTczemNqMXg2amxLUFNhRlJyLzhXcHhrVXYzVHYvQzZMb0JpejRLCj1WSWg3Ci0tLS0tRU5EIFBHUCBQVUJMSUMgS0VZIEJMT0NLLS0tLS0K"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/notifications/subscriptions": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all notification subscriptions",
        "description": "Retrieve a list of existing notification subscriptions with details.",
        "parameters": [],
        "operationId": "listSubscriptions",
        "tags": [
          "Subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of notification subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListSubscriptionsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SubscriptionResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "endpoint": "https://example.org/handler/for/notifications",
                          "subscriptionDetails": [
                            {
                              "url": "arn:aws:sns:us-east-1:<...>:fcb4a2c9-9c4f-4706-b312-6b22650f5d17",
                              "status": "confirmed"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a notification subscription",
        "description": "Subscribe to receiving notifications at a given endpoint. The endpoint should be able to handle AWS SNS subscription requests. For more details see https://docs.aws.amazon.com/mobile/sdkforxamarin/developerguide/sns-send-http.html. Note, the sandbox environment allows a maximum of 3 active subscriptions; otherwise, this is limited to 1 active subscription and subsequent create requests will be rejected with a Limit Exceeded error.\n",
        "operationId": "createSubscribtion",
        "tags": [
          "Subscriptions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a notification subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateSubscribtionResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SubscriptionResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "endpoint": "https://example.org/handler/for/notifications",
                        "subscriptionDetails": [
                          {
                            "url": "arn:aws:sns:us-east-1:<...>:fcb4a2c9-9c4f-4706-b312-6b22650f5d17",
                            "status": "confirmed"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "429": {
            "$ref": "#/components/responses/LimitExceeded"
          }
        }
      }
    },
    "/v1/notifications/subscriptions/{id}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Remove a notification subscription",
        "description": "To remove a subscription, all its subscription requests' statuses must be either 'confirmed', 'deleted' or a combination of those. A subscription with at least one 'pending' subscription request cannot be removed.",
        "operationId": "deleteSubscribtion",
        "tags": [
          "Subscriptions"
        ],
        "responses": {
          "200": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Successfully removed a subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DeleteSubscribtionResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/UnsubscribeResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/channels": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all channels",
        "description": "Retrieve a list of channels with details (e.g. `cardDescriptor`, `achDescriptor`, etc.).",
        "parameters": [],
        "operationId": "listChannels",
        "tags": [
          "Channels"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of channels.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListChannelsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "default": true,
                          "cardDescriptor": "CIRCLE LLC.",
                          "achDescriptor": "CIRCLE LLC."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/stablecoins": {
      "get": {
        "summary": "List all stablecoins",
        "description": "Retrieves total circulating supply for supported stablecoins across all chains. This endpoint is rate limited to one call per minute (based on IP).",
        "operationId": "listStablecoins",
        "tags": [
          "Stablecoins"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all stablecoin supplies across all chains.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListStablecoinsResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Stablecoins"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "name": "USD Coin",
                          "symbol": "USDC",
                          "totalAmount": "132.584192",
                          "chains": [
                            {
                              "amount": "132.584192",
                              "chain": "ALGO"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/LimitExceeded"
          }
        }
      }
    },
    "/v1/businessAccount/balances": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all balances",
        "description": "Retrieves the balance of funds that are available for use.",
        "operationId": "listBusinessBalances",
        "tags": [
          "Balances"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved balances.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBusinessBalancesResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Balances"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "available": [
                          {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        ],
                        "unsettled": [
                          {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/balances": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all balances",
        "description": "Retrieves the balance of merchant funds that have settled and also of funds that have been sent for processing but have not yet settled.",
        "operationId": "listBalances",
        "tags": [
          "Balances"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved balances.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBalancesResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Balances"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "available": [
                          {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        ],
                        "unsettled": [
                          {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/cards": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a card",
        "operationId": "createCard",
        "tags": [
          "Cards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a card.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateCardResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Card"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "expMonth": 1,
                        "expYear": 2020,
                        "network": "VISA",
                        "last4": "0123",
                        "bin": "401230",
                        "issuerCountry": "US",
                        "fundingType": "credit",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "errorCode": "verification_failed",
                        "verification": {
                          "avs": "D",
                          "cvv": "not_requested"
                        },
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "metadata": {
                          "email": "satoshi@circle.com",
                          "phoneNumber": "+14155555555"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all cards",
        "operationId": "listCards",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of cards.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListCardsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SimpleCard"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "status": "pending",
                          "billingDetails": {
                            "country": "US",
                            "district": "MA"
                          },
                          "expMonth": 1,
                          "expYear": 2020,
                          "network": "VISA",
                          "bin": "401230",
                          "issuerCountry": "US",
                          "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                          "verification": {
                            "avs": "D",
                            "cvv": "not_requested"
                          },
                          "riskEvaluation": {
                            "decision": "approved",
                            "reason": "3000"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/cards/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a card",
        "operationId": "getCard",
        "tags": [
          "Cards"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a card.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetCardResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Card"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "expMonth": 1,
                        "expYear": 2020,
                        "network": "VISA",
                        "last4": "0123",
                        "bin": "401230",
                        "issuerCountry": "US",
                        "fundingType": "credit",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "errorCode": "verification_failed",
                        "verification": {
                          "avs": "D",
                          "cvv": "not_requested"
                        },
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "metadata": {
                          "email": "satoshi@circle.com",
                          "phoneNumber": "+14155555555"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a card",
        "operationId": "updateCard",
        "tags": [
          "Cards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesfully modified a card.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpdateCardResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Card"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "expMonth": 1,
                        "expYear": 2020,
                        "network": "VISA",
                        "last4": "0123",
                        "bin": "401230",
                        "issuerCountry": "US",
                        "fundingType": "credit",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "errorCode": "verification_failed",
                        "verification": {
                          "avs": "D",
                          "cvv": "not_requested"
                        },
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "metadata": {
                          "email": "satoshi@circle.com",
                          "phoneNumber": "+14155555555"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/businessAccount/banks/wires": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a Wire bank account",
        "operationId": "createBusinessWireAccount",
        "tags": [
          "Wires"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WireCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a bank account for wire transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessWireAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Wire"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "WELLS FARGO BANK, NA ****0010",
                        "trackingRef": "CIR13FB13A",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "bankAddress": {
                          "bankName": "SAN FRANCISCO",
                          "city": "SAN FRANCISCO",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "CA"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all Wire bank accounts",
        "operationId": "listBusinessWireAccounts",
        "tags": [
          "Wires"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of bank accounts.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBusinessWireAccountsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Wire"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "status": "pending",
                          "description": "WELLS FARGO BANK, NA ****0010",
                          "trackingRef": "CIR13FB13A",
                          "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                          "billingDetails": {
                            "name": "Satoshi Nakamoto",
                            "city": "Boston",
                            "country": "US",
                            "line1": "100 Money Street",
                            "line2": "Suite 1",
                            "district": "MA",
                            "postalCode": "01234"
                          },
                          "bankAddress": {
                            "bankName": "SAN FRANCISCO",
                            "city": "SAN FRANCISCO",
                            "country": "US",
                            "line1": "100 Money Street",
                            "line2": "Suite 1",
                            "district": "CA"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/banks/wires/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a Wire bank account",
        "operationId": "getBusinessWireAccount",
        "tags": [
          "Wires"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a bank account for wire transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessWireAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Wire"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "WELLS FARGO BANK, NA ****0010",
                        "trackingRef": "CIR13FB13A",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "bankAddress": {
                          "bankName": "SAN FRANCISCO",
                          "city": "SAN FRANCISCO",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "CA"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/wires/{id}/instructions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          },
          {
            "$ref": "#/components/parameters/Currency"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Wire instructions",
        "description": "Get the wire transfer instructions into the Circle bank account given your bank account id.",
        "operationId": "getBusinessWireAccountInstructions",
        "tags": [
          "Wires"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved wire transfer instructions for the bank account.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessWireAccountInstructionsResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WireInstruction"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB13A",
                        "beneficiary": {
                          "name": "CIRCLE INTERNET FINANCIAL INC",
                          "address1": "99 HIGH STREET",
                          "address2": "BOSTON MA 02110"
                        },
                        "beneficiaryBank": {
                          "name": "SILVERGATE BANK",
                          "swiftCode": "SIVGUS66XXX",
                          "routingNumber": "322286803",
                          "accountNumber": "****7427",
                          "currency": "USD",
                          "address": "4250 EXECUTIVE SQUARE SUITE 300",
                          "city": "LA JOLLA",
                          "postalCode": "02110",
                          "country": "US"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/banks/wires": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a Wire bank account",
        "operationId": "createWireAccount",
        "tags": [
          "Wires"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WireCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a bank account for wire transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateWireAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Wire"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "WELLS FARGO BANK, NA ****0010",
                        "trackingRef": "CIR13FB13A",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "bankAddress": {
                          "bankName": "SAN FRANCISCO",
                          "city": "SAN FRANCISCO",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "CA"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/banks/wires/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a Wire bank account",
        "operationId": "getWireAccount",
        "tags": [
          "Wires"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a bank account for wire transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetWireAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Wire"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "WELLS FARGO BANK, NA ****0010",
                        "trackingRef": "CIR13FB13A",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "bankAddress": {
                          "bankName": "SAN FRANCISCO",
                          "city": "SAN FRANCISCO",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "CA"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/banks/wires/{id}/instructions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Wire instructions",
        "description": "Get the wire transfer instructions into the Circle bank account given your bank account id",
        "operationId": "getWireAccountInstructions",
        "tags": [
          "Wires"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved wire transfer instructions for the bank account.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetWireAccountInstructionsResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WireInstruction"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB13A",
                        "beneficiary": {
                          "name": "CIRCLE INTERNET FINANCIAL INC",
                          "address1": "99 HIGH STREET",
                          "address2": "BOSTON MA 02110"
                        },
                        "beneficiaryBank": {
                          "name": "SILVERGATE BANK",
                          "swiftCode": "SIVGUS66XXX",
                          "routingNumber": "322286803",
                          "accountNumber": "****7427",
                          "currency": "USD",
                          "address": "4250 EXECUTIVE SQUARE SUITE 300",
                          "city": "LA JOLLA",
                          "postalCode": "02110",
                          "country": "US"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/sen": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a Silvergate SEN bank account (BETA)",
        "operationId": "createBusinessSenAccount",
        "tags": [
          "SEN"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SenFiatAccountCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a bank account for Silvergate SEN transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessSenAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SenFiatAccountResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "SILVERGATE BANK ****1111",
                        "trackingRef": "CIR13FB14A",
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z",
                        "currency": "USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all Silvergate SEN bank accounts (BETA).",
        "operationId": "listBusinessSenAccounts",
        "tags": [
          "SEN"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all bank accounts for Silvergate SEN transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBusinessSenAccountsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SenFiatAccountResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "status": "pending",
                          "description": "SILVERGATE BANK ****1111",
                          "trackingRef": "CIR13FB14A",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z",
                          "currency": "USD"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/banks/sen/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a Silvergate SEN bank account (BETA)",
        "operationId": "getBusinessSenAccount",
        "tags": [
          "SEN"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a bank account for Silvergate SEN transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessSenAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SenFiatAccountResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "SILVERGATE BANK ****1111",
                        "trackingRef": "CIR13FB14A",
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z",
                        "currency": "USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/sen/{id}/instructions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Silvergate SEN instructions (BETA)",
        "description": "Get the Silvergate SEN transfer instructions into the Circle bank account given your bank account id (BETA).",
        "operationId": "getBusinessSenAccountInstructions",
        "tags": [
          "SEN"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Sen transfer instructions for the bank account.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessSenAccountInstructionsResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SenInstruction"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB14A",
                        "accountNumber": "11111111",
                        "currency": "USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/banks/ach": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a ACH bank account",
        "operationId": "createAchAccount",
        "tags": [
          "ACH"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AchCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a bank account for ACH transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateAchAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Ach"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "accountNumber": "****6789",
                        "routingNumber": "613334455",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "bankAccountType": "retail",
                        "bankAddress": {
                          "bankName": "SAN FRANCISCO",
                          "city": "SAN FRANCISCO",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "CA"
                        },
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "errorCode": "bank_account_authorization_expired",
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z",
                        "metadata": {
                          "email": "satoshi@circle.com",
                          "phoneNumber": "+14155555555"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/banks/ach/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a ACH bank account",
        "operationId": "getAchAccount",
        "tags": [
          "ACH"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a bank account for ACH transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetAchAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Ach"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "accountNumber": "****6789",
                        "routingNumber": "613334455",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "bankAccountType": "retail",
                        "bankAddress": {
                          "bankName": "SAN FRANCISCO",
                          "city": "SAN FRANCISCO",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "CA"
                        },
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "errorCode": "bank_account_authorization_expired",
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z",
                        "metadata": {
                          "email": "satoshi@circle.com",
                          "phoneNumber": "+14155555555"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/banks/sepa": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a SEPA bank account (BETA)",
        "operationId": "createSepaAccount",
        "tags": [
          "SEPA"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SepaCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a bank account for SEPA transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateSepaAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Sepa"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "Bank of Ireland ****0010",
                        "trackingRef": "CIR13FB13A",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/banks/sepa/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a SEPA bank account (BETA)",
        "operationId": "getSepaAccount",
        "tags": [
          "SEPA"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a bank account for SEPA transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetSepaAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Sepa"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "Bank of Ireland ****0010",
                        "trackingRef": "CIR13FB13A",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/banks/sepa/{id}/instructions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get SEPA instructions (BETA)",
        "description": "Get the SEPA transfer instructions into the Circle bank account given your bank account id (BETA).",
        "operationId": "getSepaAccountInstructions",
        "tags": [
          "SEPA"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved SEPA transfer instructions for the bank account.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetSepaAccountInstructionsResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SepaInstruction"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB13A",
                        "beneficiary": {
                          "name": "CIRCLE INTERNET FINANCIAL INC",
                          "address1": "99 HIGH STREET",
                          "address2": "BOSTON MA 02110"
                        },
                        "beneficiaryBank": {
                          "name": "LHV Bank",
                          "bic": "LHVBEE22XXX",
                          "iban": "****6789",
                          "address": "Tartu mnt 2, 10145 Tallinn",
                          "city": "Tallinn",
                          "postalCode": "10017",
                          "country": "EE"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/signet": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a Signet bank account (Production Only)",
        "operationId": "createBusinessSignetAccount",
        "tags": [
          "Signet"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignetFiatAccountCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a bank account for Signet transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessSignetAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SignetFiatAccountResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "trackingRef": "CIR13FB14A",
                        "walletAddress": "0xcac04f0069e4ac9314ac4e608e99278a3bebabcd",
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all Signet bank accounts (Production Only).",
        "operationId": "listBusinessSignetAccounts",
        "tags": [
          "Signet"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all bank accounts for Signet transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBusinessSignetAccountsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SignetFiatAccountResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "status": "pending",
                          "trackingRef": "CIR13FB14A",
                          "walletAddress": "0xcac04f0069e4ac9314ac4e608e99278a3bebabcd",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/banks/signet/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a Signet bank account (Production Only)",
        "operationId": "getBusinessSignetAccount",
        "tags": [
          "Signet"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a bank account for Signet transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessSignetAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SignetFiatAccountResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "trackingRef": "CIR13FB14A",
                        "walletAddress": "0xcac04f0069e4ac9314ac4e608e99278a3bebabcd",
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/signet/{id}/instructions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Signet instructions (Production Only)",
        "description": "Get the Signet transfer instructions into the Circle bank account given your bank account id (only available on Production now).",
        "operationId": "getBusinessSignetAccountInstructions",
        "tags": [
          "Signet"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Signet transfer instructions for the bank account.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBusinessSignetAccountInstructionsResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SignetInstruction"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB14A",
                        "walletAddress": "0x7e4f4fe03243ac7b291ebaee90b2bb27025a1234"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/wallets/addresses/deposit": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a deposit address",
        "description": "Generates a new blockchain address for a wallet for a given currency/chain pair. Circle may reuse addresses on blockchains that support reuse. For example, if you're requesting two addresses for depositing USD and ETH, both on Ethereum, you may see the same Ethereum address returned. Depositing cryptocurrency to a generated address will credit the associated wallet with the value of the deposit.\n",
        "operationId": "createBusinessDepositAddress",
        "tags": [
          "Addresses"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessGenerateAddressRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully generated a new deposit address.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessDepositAddressResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AddressObject"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                        "addressTag": "123456789",
                        "currency": "USD",
                        "chain": "ALGO"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all deposit addresses",
        "operationId": "getBusinessDepositAddress",
        "tags": [
          "Addresses"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of deposit addresses.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessDepositAddressResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddressObject"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "addressTag": "123456789",
                          "currency": "USD",
                          "chain": "ALGO"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/wallets/addresses/recipient": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a recipient address",
        "description": "Stores an external blockchain address. Once added, the recipient address must be verified to ensure that you know and trust each new address.\n",
        "operationId": "createBusinessRecipientAddress",
        "tags": [
          "Addresses"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessRecipientAddressCreationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added a recipient address.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessRecipientAddressResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BusinessRecipientAddressObject"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                        "addressTag": "123456789",
                        "chain": "ALGO",
                        "currency": "USD",
                        "description": "My USDC address at a cryptocurrency exchange"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all recipient addresses",
        "description": "Returns a list of recipient addresses that have each been verified and are eligible for transfers. Any recipient addresses pending verification are not included in the response.\n",
        "operationId": "listBusinessRecipientAddresses",
        "tags": [
          "Addresses"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of recipient addresses.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "listBusinessRecipientAddressesResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BusinessRecipientAddressObject"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "addressTag": "123456789",
                          "chain": "ALGO",
                          "currency": "USD",
                          "description": "My USDC address at a cryptocurrency exchange"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/deposits": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "description": "Unique identifier for the deposit type. Filters results to fetch deposits made by this specific type.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "wire"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all deposits",
        "description": "Searches for deposits sent to your business account. If the date parameters are omitted, returns the most recent deposits. This endpoint returns up to 50 deposits in descending chronological order or pageSize, if provided.",
        "operationId": "listBusinessDeposits",
        "tags": [
          "Deposits"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of deposits.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBusinessDepositsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BusinessDeposit"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "sourceWalletId": "9b57048d-2365-4ff5-956b-0199170d1035",
                          "destination": {
                            "type": "wallet",
                            "id": "12345"
                          },
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fee": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "status": "pending",
                          "riskEvaluation": {
                            "decision": "approved",
                            "reason": "3000"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/paymentIntents": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a payment intent",
        "operationId": "createPaymentIntent",
        "tags": [
          "Payment Intents"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentIntent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a payment intent.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreatePaymentIntentResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PaymentIntent"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "8755d0ea-14f9-4259-b092-de23c14b6568",
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "amountPaid": {
                          "amount": "0.00",
                          "currency": "USD"
                        },
                        "settlementCurrency": "USD",
                        "paymentMethods": [
                          {
                            "type": "blockchain",
                            "chain": "ETH"
                          }
                        ],
                        "paymentIds": [],
                        "timeline": [
                          {
                            "status": "created",
                            "time": "2022-07-21T20:13:35.579331Z"
                          }
                        ],
                        "createDate": "2022-07-21T20:13:35.578678Z",
                        "updateDate": "2022-07-21T20:19:24.859052Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all payment intents",
        "operationId": "listPaymentIntents",
        "tags": [
          "Payment Intents"
        ],
        "parameters": [
          {
            "name": "status",
            "description": "Filters by the most recent `timeline.status` within the payment intent.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "pending",
                "complete",
                "expired",
                "failed"
              ]
            }
          },
          {
            "name": "context",
            "description": "Filters by the most recent `timeline.context` within the payment intent.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "underpaid",
                "paid",
                "overpaid"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of payment intents.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListPaymentIntentsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentIntent"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "idempotencyKey": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "amountPaid": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "settlementCurrency": "USD",
                          "paymentMethods": [
                            {
                              "type": "blockchain",
                              "chain": "ALGO",
                              "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F"
                            }
                          ],
                          "fees": [
                            {
                              "type": "blockchainLeaseFee",
                              "amount": "3.14",
                              "currency": "USD"
                            }
                          ],
                          "paymentIds": [
                            "69808f36-3e5e-4f37-bf82-ca79e4d70fc1"
                          ],
                          "timeline": [
                            {
                              "status": "created",
                              "context": "underpaid",
                              "time": "2020-04-10T02:13:30.000Z"
                            }
                          ],
                          "expiresOn": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z",
                          "createDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/paymentIntents/{id}": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a payment intent",
        "operationId": "getPaymentIntent",
        "tags": [
          "Payment Intents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a payment intent.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetPaymentIntentResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PaymentIntent"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "8755d0ea-14f9-4259-b092-de23c14b6568",
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "amountPaid": {
                          "amount": "0.00",
                          "currency": "USD"
                        },
                        "settlementCurrency": "USD",
                        "paymentMethods": [
                          {
                            "type": "blockchain",
                            "chain": "ETH"
                          }
                        ],
                        "paymentIds": [],
                        "timeline": [
                          {
                            "status": "created",
                            "time": "2022-07-21T20:13:35.579331Z"
                          }
                        ],
                        "createDate": "2022-07-21T20:13:35.578678Z",
                        "updateDate": "2022-07-21T20:19:24.859052Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/paymentIntents/{id}/expire": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Expire a payment intent",
        "operationId": "expirePaymentIntent",
        "tags": [
          "Payment Intents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully expired a payment intent.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ExpirePaymentIntentResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PaymentIntent"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "8755d0ea-14f9-4259-b092-de23c14b6568",
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "amountPaid": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "settlementCurrency": "USD",
                        "paymentMethods": [
                          {
                            "type": "blockchain",
                            "chain": "ETH"
                          }
                        ],
                        "paymentIds": [],
                        "timeline": [
                          {
                            "status": "expired",
                            "context": "underpaid",
                            "reason": "requested_by_merchant",
                            "time": "2022-07-21T21:45:54.569Z"
                          },
                          {
                            "status": "created",
                            "time": "2022-07-21T20:13:35.579331Z"
                          }
                        ],
                        "createDate": "2022-07-21T20:13:35.578678Z",
                        "updateDate": "2022-07-21T20:19:24.859052Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/payments": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Source"
          },
          {
            "$ref": "#/components/parameters/SettlementId"
          },
          {
            "$ref": "#/components/parameters/PaymentIntentId"
          },
          {
            "$ref": "#/components/parameters/PaymentSourceType"
          },
          {
            "$ref": "#/components/parameters/PaymentStatus"
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all payments",
        "operationId": "listPayments",
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of payments.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListPaymentsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/FiatPayment"
                          },
                          {
                            "$ref": "#/components/schemas/CryptoPayment"
                          },
                          {
                            "$ref": "#/components/schemas/FiatCancel"
                          },
                          {
                            "$ref": "#/components/schemas/FiatRefund"
                          }
                        ],
                        "discriminator": {
                          "propertyName": "type",
                          "mapping": {
                            "Fiat Payment": "#/components/schemas/FiatPayment",
                            "Crypto Payment": "#/components/schemas/CryptoPayment",
                            "Fiat Cancel": "#/components/schemas/FiatCancel",
                            "Fiat Refund": "#/components/schemas/FiatRefund"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Fiat Payment": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "type": "payment",
                          "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                          "merchantWalletId": "212000",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "source": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "card"
                          },
                          "description": "Payment",
                          "status": "pending",
                          "captured": false,
                          "captureAmount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "captureDate": "2020-04-10T02:13:30.000Z",
                          "requiredAction": {
                            "type": "three_d_secure_required",
                            "redirectUrl": "https://example.org"
                          },
                          "cancel": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "cancel",
                            "description": "Payment",
                            "status": "pending",
                            "createDate": "2020-04-10T02:13:30.000Z"
                          },
                          "refunds": [
                            {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "payment",
                              "amount": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "description": "Payment",
                              "status": "pending",
                              "requiredAction": {
                                "type": "three_d_secure_required",
                                "redirectUrl": "https://example.org"
                              },
                              "fees": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "createDate": "2020-04-10T02:13:30.000Z"
                            }
                          ],
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  },
                  "Crypto Payment": {
                    "value": {
                      "data": [
                        {
                          "id": "66c56b6a-fc79-338b-8b94-aacc4f0f18de",
                          "type": "payment",
                          "status": "paid",
                          "amount": {
                            "amount": "1.00",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "0.01",
                            "currency": "USD"
                          },
                          "merchantId": "f1397191-56e6-42fd-be86-0a7b9bd91522",
                          "merchantWalletId": "1000999922",
                          "paymentIntentId": "6e4d4047-db14-4c09-b238-1215aee50d03",
                          "settlementAmount": {
                            "amount": "1.00",
                            "currency": "USD"
                          },
                          "depositAddress": {
                            "chain": "ETH",
                            "address": "0x97de855690955e0da79ce5c1b6804847e7070c7f"
                          },
                          "transactionHash": "0x7351585460bd657f320b9afa02a52c26d89272d0d10cc29913eb8b28e64fd906",
                          "createDate": "2022-07-21T20:16:35.092852Z",
                          "updateDate": "2022-07-21T20:19:24.719313Z"
                        }
                      ]
                    }
                  },
                  "Fiat Cancel": {
                    "value": {
                      "data": [
                        {
                          "id": "2dc266f5-0658-48ec-a81f-9c768279564d",
                          "type": "cancel",
                          "status": "confirmed",
                          "description": "Cancel Payment",
                          "amount": {
                            "amount": "10.00",
                            "currency": "USD"
                          },
                          "createDate": "2022-04-21T21:50:34.274Z",
                          "updateDate": "2022-04-21T21:50:34.647839Z",
                          "merchantId": "b1e4e9fe-0bf1-43ad-86c7-3ab993b0051b",
                          "merchantWalletId": "1000174786",
                          "source": {
                            "id": "bc9157fe-5d73-48fe-9e77-9f6723bdcfeb",
                            "type": "card"
                          },
                          "originalPayment": {
                            "id": "2812f549-062a-4bdd-8ee5-b521aa48a84d",
                            "type": "payment",
                            "status": "failed",
                            "createDate": "2022-04-21T21:47:41.501Z",
                            "updateDate": "2022-04-21T21:50:34.669012Z"
                          },
                          "reason": "requested_by_customer"
                        }
                      ]
                    }
                  },
                  "Fiat Refund": {
                    "value": {
                      "data": [
                        {
                          "id": "03fbe7da-096a-4763-af77-e43006cd83be",
                          "type": "refund",
                          "status": "paid",
                          "description": "Refund Payment",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "0.00",
                            "currency": "USD"
                          },
                          "createDate": "2022-04-21T12:49:21.146Z",
                          "updateDate": "2022-04-21T12:54:10.596976Z",
                          "merchantId": "b1e4e9fe-0bf1-43ad-86c7-3ab993b0051b",
                          "merchantWalletId": "1000174786",
                          "source": {
                            "id": "45fa5524-41b9-48ca-94cd-f45cb36cce4d",
                            "type": "card"
                          },
                          "originalPayment": {
                            "id": "895f8db5-1d8c-407d-9533-b5ca3fbcc74e",
                            "type": "payment",
                            "status": "paid",
                            "createDate": "2022-04-06T19:33:29.690Z",
                            "updateDate": "2022-04-06T19:47:23.681180Z"
                          },
                          "reason": "requested_by_customer"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a payment",
        "operationId": "createPayment",
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a payment.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreatePaymentResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DetailedPayment"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "type": "payment",
                        "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                        "merchantWalletId": "212000",
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "source": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "type": "card"
                        },
                        "description": "Payment",
                        "status": "pending",
                        "captured": false,
                        "captureAmount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "captureDate": "2020-04-10T02:13:30.000Z",
                        "requiredAction": {
                          "type": "three_d_secure_required",
                          "redirectUrl": "https://example.org"
                        },
                        "verification": {
                          "avs": "D",
                          "cvv": "not_requested",
                          "threeDSecure": "pass",
                          "eci": "00"
                        },
                        "cancel": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "type": "cancel",
                          "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                          "merchantWalletId": "212000",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "source": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "card"
                          },
                          "description": "Payment",
                          "status": "pending",
                          "originalPayment": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "payment",
                            "amount": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "description": "Payment",
                            "status": "pending",
                            "requiredAction": {
                              "type": "three_d_secure_required",
                              "redirectUrl": "https://example.org"
                            },
                            "fees": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "createDate": "2020-04-10T02:13:30.000Z"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        },
                        "refunds": [
                          {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "refund",
                            "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                            "merchantWalletId": "212000",
                            "amount": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "source": {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "card"
                            },
                            "description": "Payment",
                            "status": "pending",
                            "originalPayment": {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "payment",
                              "amount": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "description": "Payment",
                              "status": "pending",
                              "requiredAction": {
                                "type": "three_d_secure_required",
                                "redirectUrl": "https://example.org"
                              },
                              "fees": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "createDate": "2020-04-10T02:13:30.000Z"
                            },
                            "cancel": {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "cancel",
                              "description": "Payment",
                              "status": "pending",
                              "createDate": "2020-04-10T02:13:30.000Z"
                            },
                            "fees": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                            "createDate": "2020-04-10T02:13:30.000Z",
                            "updateDate": "2020-04-10T02:13:30.000Z"
                          }
                        ],
                        "fees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "trackingRef": "24910599141085313498894",
                        "errorCode": "payment_failed",
                        "metadata": {
                          "email": "satoshi@circle.com",
                          "phoneNumber": "+14155555555"
                        },
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/payments/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a payment",
        "operationId": "getPayment",
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Successfully retrieved a payment.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetPaymentResponse",
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/FiatPaymentPolymorphic"
                        },
                        {
                          "$ref": "#/components/schemas/CryptoPayment"
                        }
                      ],
                      "discriminator": {
                        "propertyName": "type",
                        "mapping": {
                          "Fiat Payment": "#/components/schemas/FiatPayment",
                          "Crypto Payment": "#/components/schemas/CryptoPayment"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Fiat Payment": {
                    "value": {
                      "data": {
                        "data": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "type": "payment",
                          "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                          "merchantWalletId": "212000",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "source": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "card"
                          },
                          "description": "Payment",
                          "status": "pending",
                          "requiredAction": {
                            "type": "three_d_secure_required",
                            "redirectUrl": "https://example.org"
                          },
                          "verification": {
                            "avs": "D",
                            "cvv": "not_requested",
                            "threeDSecure": "pass",
                            "eci": "00"
                          },
                          "originalPayment": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "payment",
                            "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                            "merchantWalletId": "212000",
                            "amount": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "source": {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "card"
                            },
                            "description": "Payment",
                            "status": "pending",
                            "captured": false,
                            "captureAmount": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "captureDate": "2020-04-10T02:13:30.000Z",
                            "requiredAction": {
                              "type": "three_d_secure_required",
                              "redirectUrl": "https://example.org"
                            },
                            "cancel": {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "cancel",
                              "description": "Payment",
                              "status": "pending",
                              "createDate": "2020-04-10T02:13:30.000Z"
                            },
                            "refunds": [
                              {
                                "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                                "type": "payment",
                                "amount": {
                                  "amount": "3.14",
                                  "currency": "USD"
                                },
                                "description": "Payment",
                                "status": "pending",
                                "requiredAction": {
                                  "type": "three_d_secure_required",
                                  "redirectUrl": "https://example.org"
                                },
                                "fees": {
                                  "amount": "3.14",
                                  "currency": "USD"
                                },
                                "createDate": "2020-04-10T02:13:30.000Z"
                              }
                            ],
                            "fees": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                            "createDate": "2020-04-10T02:13:30.000Z",
                            "updateDate": "2020-04-10T02:13:30.000Z"
                          },
                          "cancel": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "cancel",
                            "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                            "merchantWalletId": "212000",
                            "amount": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "source": {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "card"
                            },
                            "description": "Payment",
                            "status": "pending",
                            "originalPayment": {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "payment",
                              "amount": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "description": "Payment",
                              "status": "pending",
                              "requiredAction": {
                                "type": "three_d_secure_required",
                                "redirectUrl": "https://example.org"
                              },
                              "fees": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "createDate": "2020-04-10T02:13:30.000Z"
                            },
                            "fees": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                            "createDate": "2020-04-10T02:13:30.000Z",
                            "updateDate": "2020-04-10T02:13:30.000Z"
                          },
                          "refunds": [
                            {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "refund",
                              "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                              "merchantWalletId": "212000",
                              "amount": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "source": {
                                "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                                "type": "card"
                              },
                              "description": "Payment",
                              "status": "pending",
                              "originalPayment": {
                                "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                                "type": "payment",
                                "amount": {
                                  "amount": "3.14",
                                  "currency": "USD"
                                },
                                "description": "Payment",
                                "status": "pending",
                                "requiredAction": {
                                  "type": "three_d_secure_required",
                                  "redirectUrl": "https://example.org"
                                },
                                "fees": {
                                  "amount": "3.14",
                                  "currency": "USD"
                                },
                                "createDate": "2020-04-10T02:13:30.000Z"
                              },
                              "cancel": {
                                "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                                "type": "cancel",
                                "description": "Payment",
                                "status": "pending",
                                "createDate": "2020-04-10T02:13:30.000Z"
                              },
                              "fees": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                              "createDate": "2020-04-10T02:13:30.000Z",
                              "updateDate": "2020-04-10T02:13:30.000Z"
                            }
                          ],
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "trackingRef": "24910599141085313498894",
                          "externalRef": "YYYYMMDDXXXXXXXX012345",
                          "errorCode": "payment_failed",
                          "metadata": {
                            "email": "satoshi@circle.com",
                            "phoneNumber": "+14155555555"
                          },
                          "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                          "riskEvaluation": {
                            "decision": "approved",
                            "reason": "3000"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      }
                    }
                  },
                  "Crypto Payment": {
                    "value": {
                      "data": {
                        "id": "66c56b6a-fc79-338b-8b94-aacc4f0f18de",
                        "type": "payment",
                        "status": "paid",
                        "amount": {
                          "amount": "1.00",
                          "currency": "USD"
                        },
                        "fees": {
                          "amount": "0.01",
                          "currency": "USD"
                        },
                        "merchantId": "f1397191-56e6-42fd-be86-0a7b9bd91522",
                        "merchantWalletId": "1000999922",
                        "paymentIntentId": "6e4d4047-db14-4c09-b238-1215aee50d03",
                        "settlementAmount": {
                          "amount": "1.00",
                          "currency": "USD"
                        },
                        "depositAddress": {
                          "chain": "ETH",
                          "address": "0x97de855690955e0da79ce5c1b6804847e7070c7f"
                        },
                        "transactionHash": "0x7351585460bd657f320b9afa02a52c26d89272d0d10cc29913eb8b28e64fd906",
                        "createDate": "2022-07-21T20:16:35.092852Z",
                        "updateDate": "2022-07-21T20:19:24.719313Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/payments/{id}/capture": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptureCreationRequest"
              }
            }
          }
        },
        "summary": "Capture a payment (BETA)",
        "description": "Warning: Please contact Circle support if you are planning on using this feature.\n\nThe given amount will be captured for the authorized payment if possible. If no amount is specified, the full amount\nwill be captured. You can only capture once per authorization.\n\nA successful response does *not* mean the payment has been captured. It only means the capture request was successfully submitted.\n",
        "operationId": "capturePayment",
        "tags": [
          "Payments"
        ],
        "responses": {
          "202": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Payment capture successfully initiated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/payments/{id}/cancel": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelCreationRequest"
              }
            }
          }
        },
        "summary": "Cancel a payment",
        "description": "The payment will be voided if possible meaning the payment source will not be charged & the payment will never settle.\nOtherwise, the payment will be refunded meaning the payment source will be charged & the payment will be refunded from deductions of future settlements.\nNot all payments are eligible to be cancelled.\n\nA successful response does *not* mean the payment has been cancelled; it only means the cancellation request is successfully submitted.\n",
        "operationId": "cancelPayment",
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Payment cancellation successfully initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CancelPaymentResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DetailedCancel"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "type": "cancel",
                        "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                        "merchantWalletId": "212000",
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "source": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "type": "card"
                        },
                        "description": "Payment",
                        "status": "pending",
                        "originalPayment": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "type": "payment",
                          "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                          "merchantWalletId": "212000",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "source": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "card"
                          },
                          "description": "Payment",
                          "status": "pending",
                          "captured": false,
                          "captureAmount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "captureDate": "2020-04-10T02:13:30.000Z",
                          "requiredAction": {
                            "type": "three_d_secure_required",
                            "redirectUrl": "https://example.org"
                          },
                          "cancel": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "cancel",
                            "description": "Payment",
                            "status": "pending",
                            "createDate": "2020-04-10T02:13:30.000Z"
                          },
                          "refunds": [
                            {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "payment",
                              "amount": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "description": "Payment",
                              "status": "pending",
                              "requiredAction": {
                                "type": "three_d_secure_required",
                                "redirectUrl": "https://example.org"
                              },
                              "fees": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "createDate": "2020-04-10T02:13:30.000Z"
                            }
                          ],
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        },
                        "fees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "trackingRef": "24910599141085313498894",
                        "errorCode": "payment_failed",
                        "metadata": {
                          "email": "satoshi@circle.com",
                          "phoneNumber": "+14155555555"
                        },
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "refund": false,
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/payments/{id}/refund": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundCreationRequest"
              }
            }
          }
        },
        "summary": "Refund a payment",
        "description": "The payment source will be refunded if possible. Not all payments are eligible to be cancelled.\n\nA successful response does *not* mean the payment has been refunded; it only means the refund request is successfully submitted.\n",
        "operationId": "refundPayment",
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Payment refund successfully initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RefundPaymentResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DetailedRefund"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "type": "refund",
                        "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                        "merchantWalletId": "212000",
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "source": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "type": "card"
                        },
                        "description": "Payment",
                        "status": "pending",
                        "originalPayment": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "type": "payment",
                          "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                          "merchantWalletId": "212000",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "source": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "card"
                          },
                          "description": "Payment",
                          "status": "pending",
                          "captured": false,
                          "captureAmount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "captureDate": "2020-04-10T02:13:30.000Z",
                          "requiredAction": {
                            "type": "three_d_secure_required",
                            "redirectUrl": "https://example.org"
                          },
                          "cancel": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "cancel",
                            "description": "Payment",
                            "status": "pending",
                            "createDate": "2020-04-10T02:13:30.000Z"
                          },
                          "refunds": [
                            {
                              "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                              "type": "payment",
                              "amount": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "description": "Payment",
                              "status": "pending",
                              "requiredAction": {
                                "type": "three_d_secure_required",
                                "redirectUrl": "https://example.org"
                              },
                              "fees": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "createDate": "2020-04-10T02:13:30.000Z"
                            }
                          ],
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        },
                        "cancel": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "type": "cancel",
                          "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                          "merchantWalletId": "212000",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "source": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "card"
                          },
                          "description": "Payment",
                          "status": "pending",
                          "originalPayment": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "type": "payment",
                            "amount": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "description": "Payment",
                            "status": "pending",
                            "requiredAction": {
                              "type": "three_d_secure_required",
                              "redirectUrl": "https://example.org"
                            },
                            "fees": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "createDate": "2020-04-10T02:13:30.000Z"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "channel": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        },
                        "fees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "trackingRef": "24910599141085313498894",
                        "errorCode": "payment_failed",
                        "metadata": {
                          "email": "satoshi@circle.com",
                          "phoneNumber": "+14155555555"
                        },
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/payouts": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Destination"
          },
          {
            "name": "type",
            "description": "Destination bank account type. Filters the results to fetch all payouts made to a specified destination bank account type. This query parameter can be passed multiple times to fetch results matching multiple destination bank account types.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "wire"
              ]
            }
          },
          {
            "name": "status",
            "description": "Queries items with the specified status. Matches any status if unspecified.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PayoutStatus"
              }
            }
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all payouts",
        "operationId": "listBusinessPayouts",
        "tags": [
          "Payouts"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of payouts.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBusinessPayoutsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BusinessPayout"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "sourceWalletId": "53535335",
                          "destination": {
                            "type": "wire",
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "name": "COMMERZBANK AG ****3000"
                          },
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "status": "pending",
                          "trackingRef": "CIR-6ESOQANEP3NAO",
                          "errorCode": "insufficient_funds",
                          "riskEvaluation": {
                            "decision": "approved",
                            "reason": "3000"
                          },
                          "adjustments": {
                            "fxCredit": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "fxDebit": {
                              "amount": "3.14",
                              "currency": "USD"
                            }
                          },
                          "return": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "payoutId": "abdb500d-4a59-457c-801f-2d418c8703ac",
                            "amount": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "fees": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "reason": "payout_returned",
                            "status": "pending",
                            "createDate": "2020-04-10T02:13:30.000Z",
                            "updateDate": "2020-04-10T02:13:30.000Z"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a payout",
        "operationId": "createBusinessPayout",
        "tags": [
          "Payouts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessPayoutCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a payout.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessPayoutResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BusinessPayout"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "sourceWalletId": "53535335",
                        "destination": {
                          "type": "wire",
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "name": "COMMERZBANK AG ****3000"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "fees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "status": "pending",
                        "trackingRef": "CIR-6ESOQANEP3NAO",
                        "errorCode": "insufficient_funds",
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "adjustments": {
                          "fxCredit": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fxDebit": {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        },
                        "return": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "payoutId": "abdb500d-4a59-457c-801f-2d418c8703ac",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "reason": "payout_returned",
                          "status": "pending",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/payouts/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a payout",
        "operationId": "getBusinessPayout",
        "tags": [
          "Payouts"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a payout.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessPayoutResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BusinessPayout"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "sourceWalletId": "53535335",
                        "destination": {
                          "type": "wire",
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "name": "COMMERZBANK AG ****3000"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "fees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "status": "pending",
                        "trackingRef": "CIR-6ESOQANEP3NAO",
                        "errorCode": "insufficient_funds",
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "adjustments": {
                          "fxCredit": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fxDebit": {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        },
                        "return": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "payoutId": "abdb500d-4a59-457c-801f-2d418c8703ac",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "reason": "payout_returned",
                          "status": "pending",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/payouts": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "source",
            "description": "Universally unique identifier (UUID v4) for the source wallet. Filters the results to fetch all payouts made from a source wallet. If not provided, payouts from all wallets will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54c1cbab-c419-450f-ad23-906fa03af7f0"
            }
          },
          {
            "name": "type",
            "description": "Destination bank account type. Filters the results to fetch all payouts made to a specified destination bank account type. This query parameter can be passed multiple times to fetch results matching multiple destination bank account types.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PayoutDestinationType"
              }
            }
          },
          {
            "name": "status",
            "description": "Queries items with the specified status. Matches any status if unspecified.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PayoutStatus"
              }
            }
          },
          {
            "$ref": "#/components/parameters/Destination"
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all payouts",
        "operationId": "listPayouts",
        "tags": [
          "Payouts"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of payouts.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListPayoutsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Payout"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "sourceWalletId": "53535335",
                          "destination": {
                            "type": "wire",
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "name": "COMMERZBANK AG ****3000"
                          },
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "status": "pending",
                          "trackingRef": "CIR-6ESOQANEP3NAO",
                          "errorCode": "insufficient_funds",
                          "riskEvaluation": {
                            "decision": "approved",
                            "reason": "3000"
                          },
                          "adjustments": {
                            "fxCredit": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "fxDebit": {
                              "amount": "3.14",
                              "currency": "USD"
                            }
                          },
                          "return": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "payoutId": "abdb500d-4a59-457c-801f-2d418c8703ac",
                            "amount": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "fees": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "reason": "payout_returned",
                            "status": "pending",
                            "createDate": "2020-04-10T02:13:30.000Z",
                            "updateDate": "2020-04-10T02:13:30.000Z"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a payout",
        "operationId": "createPayout",
        "tags": [
          "Payouts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a payout.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreatePayoutResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Payout"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "sourceWalletId": "53535335",
                        "destination": {
                          "type": "wire",
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "name": "COMMERZBANK AG ****3000"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "fees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "status": "pending",
                        "trackingRef": "CIR-6ESOQANEP3NAO",
                        "errorCode": "insufficient_funds",
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "adjustments": {
                          "fxCredit": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fxDebit": {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        },
                        "return": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "payoutId": "abdb500d-4a59-457c-801f-2d418c8703ac",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "reason": "payout_returned",
                          "status": "pending",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/payouts/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a payout",
        "operationId": "getPayout",
        "tags": [
          "Payouts"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a payout.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetPayoutResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DetailedPayout"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "sourceWalletId": "53535335",
                        "destination": {
                          "type": "wire",
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "name": "COMMERZBANK AG ****3000"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "fees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "status": "pending",
                        "trackingRef": "CIR-6ESOQANEP3NAO",
                        "externalRef": "YYYYMMDDXXXXXXXX012345",
                        "errorCode": "insufficient_funds",
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "adjustments": {
                          "fxCredit": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fxDebit": {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        },
                        "return": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "payoutId": "abdb500d-4a59-457c-801f-2d418c8703ac",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "reason": "payout_returned",
                          "status": "pending",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/returns": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all payout returns",
        "description": "Retrieve a list of Wire and ACH payout returns. Results will be sorted by create date descending; more recent returns will be at the beginning of the list.",
        "operationId": "listReturns",
        "tags": [
          "Returns"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of payout returns.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListReturnsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UnwithdrawalObject"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "payoutId": "abdb500d-4a59-457c-801f-2d418c8703ac",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "reason": "payout_returned",
                          "status": "pending",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/settlements": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all settlements",
        "operationId": "listSettlements",
        "tags": [
          "Settlements"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of settlements.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetSettlementsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Settlement"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "merchantWalletId": "212000",
                          "walletId": "12345",
                          "totalDebits": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "totalCredits": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "paymentFees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "chargebackFees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/settlements/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a settlement",
        "operationId": "getSettlement",
        "tags": [
          "Settlements"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a settlement.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetSettlementResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Settlement"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "merchantWalletId": "212000",
                        "walletId": "12345",
                        "totalDebits": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "totalCredits": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "paymentFees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "chargebackFees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/chargebacks": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PaymentId"
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all chargebacks",
        "description": "Retrieve list of chargebacks. Results will be sorted by create date descending: more recent chargebacks will be at the beginning of the list.\n",
        "operationId": "listChargebacks",
        "tags": [
          "Chargebacks"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of chargebacks.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListChargebacksResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BasicChargeback"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "paymentId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                          "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                          "reasonCode": "10.4",
                          "category": "Canceled Recurring Payment",
                          "history": [
                            {
                              "type": "1st Chargeback",
                              "chargebackAmount": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "fee": {
                                "amount": "3.14",
                                "currency": "USD"
                              },
                              "description": "The cardholder claims an unauthorized transaction occurred.",
                              "settlementId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                              "createDate": "2020-04-10T02:13:30.000Z"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/chargebacks/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a chargeback",
        "operationId": "getChargeback",
        "tags": [
          "Chargebacks"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a chargeback.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetChargebackResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BasicChargeback"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "paymentId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                        "merchantId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                        "reasonCode": "10.4",
                        "category": "Canceled Recurring Payment",
                        "history": [
                          {
                            "type": "1st Chargeback",
                            "chargebackAmount": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "fee": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "description": "The cardholder claims an unauthorized transaction occurred.",
                            "settlementId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                            "createDate": "2020-04-10T02:13:30.000Z"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/reversals": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PaymentStatus"
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all ACH payment reversals.",
        "description": "Retrieve a list of ACH payment reversals. Results will be sorted by create date descending; more recent reversals will be at the beginning of the list",
        "operationId": "listReversals",
        "tags": [
          "Reversals"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of ACH payment reversals.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListReversalsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Reversal"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "key1",
                          "paymentId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "description": "Merchant Payment Reversal",
                          "status": "pending",
                          "reason": "duplicate",
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/wallets": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a wallet",
        "description": "Creates an end user wallet.",
        "operationId": "createWallet",
        "tags": [
          "Wallets"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Successfully created a wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateWalletResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Wallet"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "walletId": "434000",
                        "entityId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                        "type": "end_user_wallet",
                        "description": "Treasury Wallet",
                        "balances": [
                          {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all wallets",
        "description": "Retrieves a list of a user's wallets.",
        "operationId": "listWallets",
        "tags": [
          "Wallets"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of wallets.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListWalletsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Wallet"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "walletId": "434000",
                          "entityId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                          "type": "end_user_wallet",
                          "description": "Treasury Wallet",
                          "balances": [
                            {
                              "amount": "3.14",
                              "currency": "USD"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/v1/wallets/{walletId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/WalletId"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a wallet",
        "operationId": "getWallet",
        "tags": [
          "Wallets"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a wallet.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetWalletResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Wallet"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "walletId": "434000",
                        "entityId": "fc988ed5-c129-4f70-a064-e5beb7eb8e32",
                        "type": "end_user_wallet",
                        "description": "Treasury Wallet",
                        "balances": [
                          {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/wallets/{walletId}/addresses": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/WalletId"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a blockchain address",
        "description": "Generates a new blockchain address for a wallet for a given currency/chain pair. Circle may reuse addresses on blockchains that support reuse. For example, if you're requesting two addresses for depositing USD and ETH, both on Ethereum, you may see the same Ethereum address returned. Depositing cryptocurrency to a generated address will credit the associated wallet with the value of the deposit.\n",
        "operationId": "generateAddress",
        "tags": [
          "Wallets"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateAddressRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully generated a new address.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GenerateAddressResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AddressObject"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                        "addressTag": "123456789",
                        "currency": "USD",
                        "chain": "ALGO"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/WalletId"
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all addresses",
        "description": "Retrieves a list of addresses associated with a wallet.",
        "operationId": "listAddresses",
        "tags": [
          "Wallets"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of addresses.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListAddressesResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddressObject"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "addressTag": "123456789",
                          "currency": "USD",
                          "chain": "ALGO"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/transfers": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a transfer",
        "description": "A transfer can be made from an existing business account to a blockchain location.",
        "operationId": "createBusinessTransfer",
        "tags": [
          "Transfers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessTransferCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Successfully created a transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessTransferResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Transfer"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "source": {
                          "type": "wallet",
                          "id": "12345",
                          "identities": [
                            {
                              "type": "individual",
                              "name": "Satoshi Nakamoto",
                              "addresses": [
                                {
                                  "line1": "100 Money Street",
                                  "line2": "Suite 1",
                                  "city": "Boston",
                                  "district": "MA",
                                  "postalCode": "01234",
                                  "country": "US"
                                }
                              ]
                            }
                          ]
                        },
                        "destination": {
                          "type": "blockchain",
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "addressTag": "123456789",
                          "chain": "ALGO"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "fees": [
                          {
                            "amount": "10.00",
                            "currency": "USD",
                            "type": "network"
                          }
                        ],
                        "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                        "status": "pending",
                        "errorCode": "transfer_failed",
                        "createDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all transfers",
        "description": "Searches for transfers from your business account. If the date parameters are omitted, returns the most recent transfers. This endpoint returns up to 50 transfers in descending chronological order or pageSize, if provided.",
        "operationId": "listBusinessTransfers",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListBusinessTransfersResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Transfer"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "source": {
                            "type": "wallet",
                            "id": "12345",
                            "identities": [
                              {
                                "type": "individual",
                                "name": "Satoshi Nakamoto",
                                "addresses": [
                                  {
                                    "line1": "100 Money Street",
                                    "line2": "Suite 1",
                                    "city": "Boston",
                                    "district": "MA",
                                    "postalCode": "01234",
                                    "country": "US"
                                  }
                                ]
                              }
                            ]
                          },
                          "destination": {
                            "type": "blockchain",
                            "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                            "addressTag": "123456789",
                            "chain": "ALGO"
                          },
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": [
                            {
                              "amount": "10.00",
                              "currency": "USD",
                              "type": "network"
                            }
                          ],
                          "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                          "status": "pending",
                          "errorCode": "transfer_failed",
                          "createDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/transfers/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a transfer",
        "operationId": "getBusinessTransfer",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Successfully retrieved a transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessTransferResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Transfer"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "source": {
                          "type": "wallet",
                          "id": "12345",
                          "identities": [
                            {
                              "type": "individual",
                              "name": "Satoshi Nakamoto",
                              "addresses": [
                                {
                                  "line1": "100 Money Street",
                                  "line2": "Suite 1",
                                  "city": "Boston",
                                  "district": "MA",
                                  "postalCode": "01234",
                                  "country": "US"
                                }
                              ]
                            }
                          ]
                        },
                        "destination": {
                          "type": "blockchain",
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "addressTag": "123456789",
                          "chain": "ALGO"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "fees": [
                          {
                            "amount": "10.00",
                            "currency": "USD",
                            "type": "network"
                          }
                        ],
                        "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                        "status": "pending",
                        "errorCode": "transfer_failed",
                        "createDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/transfers": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a transfer",
        "description": "A transfer can be made from an existing funded wallet to a blockchain address or another wallet.",
        "operationId": "createTransfer",
        "tags": [
          "Transfers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferCreationRequest"
              },
              "examples": {
                "request": {
                  "value": {
                    "idempotencyKey": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                    "source": {
                      "type": "wallet",
                      "id": "12345"
                    },
                    "destination": {
                      "type": "blockchain",
                      "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                      "chain": "ETH"
                    },
                    "amount": {
                      "amount": "3.14",
                      "currency": "USD"
                    }
                  }
                },
                "travel rule": {
                  "value": {
                    "idempotencyKey": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7",
                    "source": {
                      "type": "wallet",
                      "id": "12345",
                      "identities": [
                        {
                          "type": "individual",
                          "name": "Satoshi Nakamoto",
                          "addresses": [
                            {
                              "line1": "100 Money Street",
                              "line2": "Suite 1",
                              "city": "Boston",
                              "district": "MA",
                              "postalCode": "01234",
                              "country": "US"
                            }
                          ]
                        }
                      ]
                    },
                    "destination": {
                      "type": "blockchain",
                      "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                      "chain": "ETH"
                    },
                    "amount": {
                      "amount": "3000.00",
                      "currency": "USD"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Successfully created a transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateTransferResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Transfer"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "source": {
                          "type": "wallet",
                          "id": "12345"
                        },
                        "destination": {
                          "type": "blockchain",
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "chain": "ETH"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                        "status": "pending",
                        "createDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  },
                  "travel rule": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "source": {
                          "type": "wallet",
                          "id": "12345",
                          "identities": [
                            {
                              "type": "individual",
                              "name": "Satoshi Nakamoto",
                              "addresses": [
                                {
                                  "line1": "100 Money Street",
                                  "line2": "Suite 1",
                                  "city": "Boston",
                                  "district": "MA",
                                  "postalCode": "01234",
                                  "country": "US"
                                }
                              ]
                            }
                          ]
                        },
                        "destination": {
                          "type": "blockchain",
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "chain": "ETH"
                        },
                        "amount": {
                          "amount": "3000.00",
                          "currency": "USD"
                        },
                        "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                        "status": "pending",
                        "createDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "walletId",
            "description": "Unique identifier for the source or destination wallet of transfers, if any. May not be used in conjunction with destinationWalletId or sourceWalletId. Useful for fetching all transfers related to a wallet.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "12345"
            }
          },
          {
            "name": "sourceWalletId",
            "description": "Unique identifier for the source wallet of transfers, if any.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "12345"
            }
          },
          {
            "name": "destinationWalletId",
            "description": "Unique identifier for the destination wallet of transfers, if any.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "12345"
            }
          },
          {
            "$ref": "#/components/parameters/ReturnIdentities"
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all transfers",
        "description": "Searches for transfers involving the provided wallets. If no wallet ids are provided, searches all wallets associated with your Circle API account. If the date parameters are omitted, returns the most recent transfers. This endpoint returns up to 50 transfers in descending chronological order or pageSize, if provided.",
        "operationId": "listTransfers",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListTransfersResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Transfer"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "source": {
                            "type": "wallet",
                            "id": "12345"
                          },
                          "destination": {
                            "type": "blockchain",
                            "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                            "addressTag": "123456789",
                            "chain": "ALGO"
                          },
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                          "status": "pending",
                          "createDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  },
                  "travel rule": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "source": {
                            "type": "wallet",
                            "id": "12345",
                            "identities": [
                              {
                                "type": "individual",
                                "name": "Satoshi Nakamoto",
                                "addresses": [
                                  {
                                    "line1": "100 Money Street",
                                    "line2": "Suite 1",
                                    "city": "Boston",
                                    "district": "MA",
                                    "postalCode": "01234",
                                    "country": "US"
                                  }
                                ]
                              }
                            ]
                          },
                          "destination": {
                            "type": "blockchain",
                            "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                            "addressTag": "123456789",
                            "chain": "ALGO"
                          },
                          "amount": {
                            "amount": "3000.00",
                            "currency": "USD"
                          },
                          "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                          "status": "pending",
                          "createDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/transfers/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          },
          {
            "$ref": "#/components/parameters/ReturnIdentities"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a transfer",
        "operationId": "getTransfer",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Successfully retrieved a transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetTransferResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TransferDetailedTransfer"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "source": {
                          "type": "wallet",
                          "id": "12345"
                        },
                        "destination": {
                          "type": "blockchain",
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "chain": "ETH"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                        "status": "pending",
                        "createDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  },
                  "travel rule": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "source": {
                          "type": "wallet",
                          "id": "12345",
                          "identities": [
                            {
                              "type": "individual",
                              "name": "Satoshi Nakamoto",
                              "addresses": [
                                {
                                  "line1": "100 Money Street",
                                  "line2": "Suite 1",
                                  "city": "Boston",
                                  "district": "MA",
                                  "postalCode": "01234",
                                  "country": "US"
                                }
                              ]
                            }
                          ]
                        },
                        "destination": {
                          "type": "blockchain",
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "chain": "ETH"
                        },
                        "amount": {
                          "amount": "3000.00",
                          "currency": "USD"
                        },
                        "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                        "status": "pending",
                        "createDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/mocks/cards/chargebacks": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a mock chargeback",
        "description": "In the sandbox environment, initiate a mock chargeback of a specified payment.  The entire payment will be charged back for its full value.  The payment must be in the `paid` state (otherwise the endpoint will return a `404`), and each payment can only be charged back once (otherwise the endpoint will return a `409`).  This endpoint is only available in the sandbox environment.",
        "operationId": "createMockChargeback",
        "tags": [
          "Chargebacks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockChargebackCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a mock chargeback.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateMockChargebackResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MockChargeback"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/v1/mocks/payments/sen": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a mock Silvergate SEN payment",
        "description": "In the sandbox environment, initiate a mock SEN transfer that mimics the behavior of funds sent through the Silvergate SEN account linked to master wallet.",
        "operationId": "createMockSenPayment",
        "tags": [
          "Deposits"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockSenPaymentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a mock SEN transfer.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateSenPaymentResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MockSenPaymentResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB13A",
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "beneficiaryBank": {
                          "accountNumber": "11111111"
                        },
                        "status": "pending"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/mocks/ach/accounts": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a mock ACH bank account",
        "description": "In the sandbox environment, create a mock ACH account and retrieve a processor token that can be used to link an ACH account.",
        "operationId": "createMockAchAccount",
        "tags": [
          "ACH"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockAchAccountCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a mock ach payment.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateAchAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MockAchAccountResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "processorToken": "processor-sandbox-circle-82cf95bb-43f8-4191-8d30-2c9f42853621",
                        "balance": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "account": {
                          "accountNumber": "123456789",
                          "routingNumber": "011000028",
                          "description": "My ACH account"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/mocks/payments/wire": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a mock Wire payment",
        "description": "In the sandbox environment, initiate a mock wire payment that mimics the behavior of funds sent through the bank (wire) account linked to master wallet.",
        "operationId": "createMockWirePayment",
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockWirePaymentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a mock wire payment.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateWirePaymentResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MockWirePaymentResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB13A",
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "beneficiaryBank": {
                          "accountNumber": "11111111"
                        },
                        "status": "pending"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/mocks/payments/sepa": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a mock SEPA payment",
        "description": "In the sandbox environment, initiate a mock SEPA payment that mimics the behavior of funds sent through the bank (SEPA) account linked to master wallet.",
        "operationId": "createMockSepaPayment",
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockSepaPaymentRequest"
              },
              "example": {
                "trackingRef": "CIR13FB13A",
                "amount": {
                  "amount": 3.14,
                  "currency": "EUR"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a mock SEPA payment.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateSepaPaymentResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MockSepaPaymentResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB13A",
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "status": "pending"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Ping": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "example": "pong"
          }
        }
      },
      "MerchantWalletId": {
        "type": "string",
        "description": "Unique system generated identifier for the wallet of the merchant.",
        "maxLength": 36,
        "example": "212000"
      },
      "AccountConfiguration": {
        "type": "object",
        "properties": {
          "payments": {
            "title": "WalletConfig",
            "type": "object",
            "properties": {
              "masterWalletId": {
                "$ref": "#/components/schemas/MerchantWalletId"
              }
            }
          }
        }
      },
      "IdKey": {
        "type": "string",
        "description": "Universally unique identifier (UUID v4) of the public key used in encryption. NOTE the sandbox environment uses the default value of `key1`. For this reason the example supplied is `key1` rather than a UUID.",
        "format": "uuid",
        "example": "key1"
      },
      "PublicKey": {
        "type": "object",
        "required": [
          "keyId",
          "publicKey"
        ],
        "properties": {
          "keyId": {
            "$ref": "#/components/schemas/IdKey"
          },
          "publicKey": {
            "type": "string",
            "description": "A PGP ascii-armor encoded public key.",
            "example": "LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tClZlcnNpb246IEJDUEcgdjEuNTQKCm1RRU5CRjAxdmk0QkNBQ3JzMDNLS1Y0Qk9SRkYyT0Z4bUdvb0UyaTZMbnNneE5UL1dsV2s1ZTl2RDd2NENkSm0KcGJJbENmZ0U4WFlnYmhKUTE4YStaTzlPM0RFYUp2dGhJSEtjL0l1UEIvZmdEYUJUT285NkJzL2pVRFp6ZGxaVApQazNFUjliNFZPeGVwMFNPSHFMcmxTVFY4ZXB3M1R3SEdaL3NpSWdBYXEwRGdJdlZxUTY4TGVaMnorUFJWZm04CmhhSnJpb05SRU5Ja2ZNTWY5aFdySlowSW1zUk1aVmpDMVVrd2FSSHdrTTMwQUlia1dYcFJ5R205SXhQaXdGa08Kb1RnWlpwUFpsdVczckdkWER0NHZqL24za09hczV1dFdoNFovMlhjWHBiSUUyU0FPK0hycUdIclRnK1ZmZ05JNwpZcVZqYW5MOEN1bm83UkxmcDhKZlZDNXBLUm5ySVNCTnphN1ZBQkVCQUFHMEJrTnBjbU5zWllrQkhBUVFBUWtBCkJnVUNYVFcrTGdBS0NSQ3EzaHNwWjBMeGEwdnpCLzQvQTJpdk1CWW1aZXV2bEJZMm5ZZnNXek9Sb28vU3BIYkQKY2Y0UmtxZzZ0RERJSkUzNHhDVit0MzJydmJkM0ZOdVZseWs1MDVZRkpESnI4cVc2S0tkQVRXdU16eW5mMVVoUAo1M25hTlc0cXdrdSt3b0RWWjJpci9lUVI1WUc4L0RGcnd3bXdaa0dRd0Ftc3h5ZHd5anBnLzBrQ3lpZHkxdVBkCmVVWGgwdWt4dS9Dais4UFl5cHcwdit5V2tzbjdSZ2dVbkJFMWhiQ2pEV3FweHZjMEpDNVAxdmx6L2xRcWQrR3oKRC9Td1FJTVdRVElnV3BHRVVvQTRDc3drbU5PdHhsRVF1U0tueXNtTG02S0ExUmRhTzd6V2IrdWNLN21FZ2VoSwpXU2hHZExqRVNNZlVRUTczemNqMXg2amxLUFNhRlJyLzhXcHhrVXYzVHYvQzZMb0JpejRLCj1WSWg3Ci0tLS0tRU5EIFBHUCBQVUJMSUMgS0VZIEJMT0NLLS0tLS0K"
          }
        }
      },
      "Id": {
        "type": "string",
        "description": "Unique system generated identifier for the entity.",
        "format": "uuid",
        "example": "b8627ae8-732b-4d25-b947-1df8f4007a29"
      },
      "SubscriptionDetail": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Identifier for created subscription.",
            "example": "arn:aws:sns:us-east-1:<...>:fcb4a2c9-9c4f-4706-b312-6b22650f5d17"
          },
          "status": {
            "type": "string",
            "description": "Status of the subscription request.",
            "enum": [
              "confirmed",
              "pending",
              "deleted"
            ]
          }
        }
      },
      "SubscriptionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "endpoint": {
            "type": "string",
            "description": "URL of the endpoint.",
            "example": "https://example.org/handler/for/notifications"
          },
          "subscriptionDetails": {
            "type": "array",
            "description": "List of subscriptions details for created subscriptions.",
            "items": {
              "$ref": "#/components/schemas/SubscriptionDetail"
            }
          }
        }
      },
      "SubscriptionRequest": {
        "type": "object",
        "required": [
          "endpoint"
        ],
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "URL of the subscriber endpoint. Must be publicly accessible and utilize HTTPS.",
            "example": "https://example.org/handler/for/notifications"
          }
        }
      },
      "UnsubscribeResponse": {
        "type": "object",
        "description": "Unsubscribe response object. No fields as of now.",
        "example": {}
      },
      "ChannelResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "default": {
            "type": "boolean",
            "description": "Flag to indicate whether the channel is configured as default. At most one of the channels will have this flag set to true and the default channel is used when a payment request does not have the `channel` property set.",
            "example": true
          },
          "cardDescriptor": {
            "type": "string",
            "description": "Descriptor that appears on cardholders' bank statements for card payments submitted through this channel.",
            "example": "CIRCLE LLC."
          },
          "achDescriptor": {
            "type": "string",
            "description": "Descriptor that appears on end-users' bank statements for ACH payments submitted through this channel.",
            "example": "CIRCLE LLC."
          }
        }
      },
      "Chain": {
        "type": "string",
        "description": "A blockchain that a given currency is available on.",
        "enum": [
          "ALGO",
          "AVAX",
          "BTC",
          "ETH",
          "FLOW",
          "HBAR",
          "MATIC",
          "SOL",
          "TRX",
          "XLM"
        ]
      },
      "TokenAmount": {
        "type": "object",
        "required": [
          "amount",
          "chain"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Magnitude of the amount, in units of the currency, with a `.`.",
            "example": "132.584192"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        }
      },
      "Stablecoin": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the stablecoin.",
            "example": "USD Coin"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the stablecoin.",
            "example": "USDC"
          },
          "totalAmount": {
            "type": "string",
            "description": "Total circulating amount of the stablecoin.",
            "example": "132.584192"
          },
          "chains": {
            "type": "array",
            "description": "A list of the broken down totalAmount by chain of the stablecoin.",
            "items": {
              "$ref": "#/components/schemas/TokenAmount"
            }
          }
        }
      },
      "Stablecoins": {
        "type": "array",
        "description": "A list of stablecoin objects containing its name, symbol, total amount, and per-chain amount.",
        "items": {
          "$ref": "#/components/schemas/Stablecoin"
        }
      },
      "Money": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Magnitude of the amount, in units of the currency, with a `.`.",
            "example": "3.14"
          },
          "currency": {
            "type": "string",
            "description": "Currency code for the amount.",
            "enum": [
              "USD",
              "EUR",
              "BTC",
              "ETH"
            ]
          }
        }
      },
      "Balances": {
        "type": "object",
        "description": "Available and unsettled balances of the merchant.",
        "required": [
          "available",
          "unsettled"
        ],
        "properties": {
          "available": {
            "type": "array",
            "description": "List of currency balances (one for each currency) that are currently available to spend.",
            "items": {
              "$ref": "#/components/schemas/Money"
            }
          },
          "unsettled": {
            "type": "array",
            "description": "List of currency balances (one for each currency) that have been captured but are currently in the process of settling and will become available to spend at some point in the future.",
            "items": {
              "$ref": "#/components/schemas/Money"
            }
          }
        }
      },
      "ExternalFiatAccountStatus": {
        "description": "Status of the account. A `pending` status indicates that the linking is in-progress; `complete` indicates the account was linked successfully; `failed` indicates it failed.",
        "type": "string",
        "enum": [
          "pending",
          "complete",
          "failed"
        ]
      },
      "SimpleBillingDetails": {
        "type": "object",
        "description": "Billing details of the card holder.",
        "required": [
          "country",
          "district"
        ],
        "properties": {
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          },
          "district": {
            "type": "string",
            "description": "State / County / Province / Region portion of the address. US and Canada use the two-letter code for the subdivision.",
            "maxLength": 16,
            "example": "MA"
          }
        }
      },
      "Fingerprint": {
        "type": "string",
        "description": "A UUID that uniquely identifies the account number. If the same account is used more than once, each card object will have a different id, but the fingerprint will stay the same.",
        "example": "eb170539-9e1c-4e92-bf4f-1d09534fdca2"
      },
      "AvsResults": {
        "type": "string",
        "description": "Status of the AVS check. Raw AVS response, expressed as an upper-case letter. `not_requested` indicates check was not made. `pending` is pending/processing.",
        "example": "D"
      },
      "CvvResults": {
        "description": "Enumerated status of the check. `not_requested` indicates check was not made. `pass` indicates value is correct. `fail` indicates value is incorrect. `unavailable` indicates card issuer did not do the provided check. `pending` indicates check is pending/processing.",
        "type": "string",
        "enum": [
          "not_requested",
          "pass",
          "fail",
          "unavailable",
          "pending"
        ]
      },
      "CardVerificationResponse": {
        "type": "object",
        "description": "Indicates the status of the card for verification purposes.",
        "required": [
          "avs",
          "cvv"
        ],
        "properties": {
          "avs": {
            "$ref": "#/components/schemas/AvsResults"
          },
          "cvv": {
            "$ref": "#/components/schemas/CvvResults"
          }
        }
      },
      "RiskEvaluation": {
        "type": "object",
        "description": "Results of risk evaluation. Only present if the payment is denied by Circle's risk service.",
        "nullable": true,
        "properties": {
          "decision": {
            "description": "Enumerated decision of the account.",
            "type": "string",
            "enum": [
              "approved",
              "denied",
              "review"
            ]
          },
          "reason": {
            "description": "Risk reason for the definitive decision outcome.",
            "type": "string",
            "nullable": true,
            "example": "3000"
          }
        }
      },
      "UtcTimestamp": {
        "type": "string",
        "description": "ISO-8601 UTC date/time format.",
        "example": "2020-04-10T02:13:30.000Z"
      },
      "SimpleCard": {
        "type": "object",
        "required": [
          "id",
          "status",
          "fingerprint",
          "billingDetails",
          "expMonth",
          "expYear",
          "network",
          "verification",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFiatAccountStatus"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/SimpleBillingDetails"
          },
          "expMonth": {
            "type": "integer",
            "description": "Two digit number representing the card's expiration month.",
            "example": 1
          },
          "expYear": {
            "type": "integer",
            "description": "Four digit number representing the card's expiration year.",
            "example": 2020
          },
          "network": {
            "type": "string",
            "description": "The network of the card.",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX",
              "UNKNOWN"
            ]
          },
          "bin": {
            "type": "string",
            "description": "The bank identification number (BIN), the first 6 digits of the card.",
            "example": "401230"
          },
          "issuerCountry": {
            "type": "string",
            "description": "The country code of the issuer bank. Follows the ISO 3166-1 alpha-2 standard.",
            "example": "US"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          },
          "verification": {
            "$ref": "#/components/schemas/CardVerificationResponse"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "IdempotencyKey": {
        "type": "string",
        "description": "Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests.",
        "format": "uuid",
        "example": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7"
      },
      "BillingDetails": {
        "type": "object",
        "required": [
          "name",
          "city",
          "country",
          "line1",
          "postalCode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name of the card or bank account holder.",
            "maxLength": 1024,
            "example": "Satoshi Nakamoto"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address.",
            "maxLength": 1024,
            "example": "Boston"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          },
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 1024,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 1024,
            "example": "Suite 1"
          },
          "district": {
            "description": "State / County / Province / Region portion of the address. If the country is US or Canada, then district is required and should use the two-letter code for the subdivision.",
            "type": "string",
            "maxLength": 16,
            "example": "MA"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal / ZIP code of the address.",
            "maxLength": 16,
            "example": "01234"
          }
        }
      },
      "CardExpMonth": {
        "type": "integer",
        "description": "Two digit number representing the card's expiration month.",
        "minimum": 1,
        "maximum": 12,
        "example": 1
      },
      "CardExpYear": {
        "type": "integer",
        "description": "Four digit number representing the card's expiration year.",
        "minimum": 1,
        "maximum": 9999,
        "example": 2020
      },
      "Email": {
        "type": "string",
        "description": "Email of the user.",
        "maxLength": 1024,
        "example": "satoshi@circle.com"
      },
      "PhoneNumber": {
        "type": "string",
        "description": "Phone number of the user in E.164 format. We recommend using a library such as [libphonenumber](https://github.com/google/libphonenumber) to parse and validate phone numbers.",
        "maxLength": 16,
        "pattern": "/\\+?[1-9]\\d{1,14}/",
        "example": "+14155555555"
      },
      "SessionId": {
        "description": "Hash of the session identifier; typically of the end user. This helps us make risk decisions and prevent fraud. IMPORTANT: Please hash the session identifier to prevent sending us actual session identifiers.\n",
        "type": "string",
        "maxLength": 50,
        "example": "DE6FA86F60BB47B379307F851E238617"
      },
      "IpAddress": {
        "type": "string",
        "description": "Single IPv4 or IPv6 address of user'",
        "example": "244.28.239.130"
      },
      "MetadataCardAndAch": {
        "type": "object",
        "required": [
          "email",
          "sessionId",
          "ipAddress"
        ],
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "sessionId": {
            "$ref": "#/components/schemas/SessionId"
          },
          "ipAddress": {
            "$ref": "#/components/schemas/IpAddress"
          }
        }
      },
      "CardCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "expMonth",
          "expYear",
          "encryptedData",
          "billingDetails",
          "metadata"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "keyId": {
            "$ref": "#/components/schemas/IdKey"
          },
          "encryptedData": {
            "type": "string",
            "format": "byte",
            "description": "PGP encrypted base64 encoded string. Contains Number and CVV.\n* **Number**: Card number. No spaces or other separators. REQUIRED\n* **CVV (Card Verification Number)**: Three or four digit security code. REQUIRED'\n",
            "example": "LS0tLS1CRUdJTiBQR1AgTUVTU0FHRS0tLS0tCgp3Y0JNQTBYV1NGbEZScFZoQVFmL2J2bVVkNG5LZ3dkbExKVTlEdEFEK0p5c0VOTUxuOUlRUWVGWnZJUWEKMGgzQklpRFNRU0RMZmI0NEs2SXZMeTZRbm54bmFLcWx0MjNUSmtPd2hGWFIrdnNSMU5IbnVHN0lUNWJECmZzeVdleXlNK1JLNUVHV0thZ3NmQ2tWamh2NGloY29xUnlTTGtJbWVmRzVaR0tMRkJTTTBsTFNPWFRURQpiMy91eU1zMVJNb3ZiclNvbXkxa3BybzUveWxabWVtV2ZsU1pWQlhNcTc1dGc1YjVSRVIraXM5ckc0cS8KMXl0M0FOYXA3UDhKekFhZVlyTnVNZGhGZFhvK0NFMC9CQnN3L0NIZXdhTDk4SmRVUEV0NjA5WFRHTG9kCjZtamY0YUtMQ01xd0RFMkNVb3dPdE8vMzVIMitnVDZKS3FoMmtjQUQyaXFlb3luNWcralRHaFNyd3NKWgpIdEphQWVZZXpGQUVOaFo3Q01IOGNsdnhZVWNORnJuNXlMRXVGTkwwZkczZy95S3loclhxQ0o3UFo5b3UKMFVxQjkzQURKWDlJZjRBeVQ2bU9MZm9wUytpT2lLall4bG1NLzhlVWc3OGp1OVJ5T1BXelhyTzdLWTNHClFSWm8KPXc1dEYKLS0tLS1FTkQgUEdQIE1FU1NBR0UtLS0tLQo"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "expMonth": {
            "$ref": "#/components/schemas/CardExpMonth"
          },
          "expYear": {
            "$ref": "#/components/schemas/CardExpYear"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataCardAndAch"
          }
        }
      },
      "VerificationErrorCode": {
        "type": "string",
        "description": "Indicates the failure reason of the card verification. Only present on cards with failed verification. Possible values are [verification_failed, verification_fraud_detected, verification_denied, verification_not_supported_by_issuer, verification_stopped_by_issuer, card_failed, card_invalid, card_address_mismatch, card_zip_mismatch, card_cvv_invalid, card_expired, card_limit_violated, card_not_honored, card_cvv_required, credit_card_not_allowed, card_account_ineligible, card_network_unsupported]'",
        "nullable": true,
        "enum": [
          "verification_failed",
          "verification_fraud_detected",
          "verification_denied",
          "verification_not_supported_by_issuer",
          "verification_stopped_by_issuer",
          "card_failed",
          "card_invalid",
          "card_address_mismatch",
          "card_zip_mismatch",
          "card_cvv_invalid",
          "card_expired",
          "card_limit_violated",
          "card_not_honored",
          "card_cvv_required",
          "credit_card_not_allowed",
          "card_account_ineligible",
          "card_network_unsupported"
        ]
      },
      "MetadataPhoneEmail": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          }
        }
      },
      "Card": {
        "type": "object",
        "required": [
          "id",
          "status",
          "billingDetails",
          "expMonth",
          "expYear",
          "network",
          "last4",
          "fingerprint",
          "verification",
          "metadata",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFiatAccountStatus"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "expMonth": {
            "$ref": "#/components/schemas/CardExpMonth"
          },
          "expYear": {
            "$ref": "#/components/schemas/CardExpYear"
          },
          "network": {
            "type": "string",
            "description": "The network of the card.",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX",
              "UNKNOWN"
            ]
          },
          "last4": {
            "type": "string",
            "description": "The last 4 digits of the card.",
            "example": "0123"
          },
          "bin": {
            "type": "string",
            "description": "The bank identification number (BIN), the first 6 digits of the card.",
            "example": "401230"
          },
          "issuerCountry": {
            "type": "string",
            "description": "The country code of the issuer bank. Follows the ISO 3166-1 alpha-2 standard.",
            "example": "US"
          },
          "fundingType": {
            "description": "The funding type of the card. Possible values are `credit`, `debit`, `prepaid`, and `unknown`.",
            "type": "string",
            "enum": [
              "credit",
              "debit",
              "prepaid",
              "unknown"
            ]
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          },
          "errorCode": {
            "$ref": "#/components/schemas/VerificationErrorCode"
          },
          "verification": {
            "$ref": "#/components/schemas/CardVerificationResponse"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataPhoneEmail"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "CardUpdate": {
        "type": "object",
        "required": [
          "keyId",
          "encryptedData",
          "expMonth",
          "expYear"
        ],
        "properties": {
          "keyId": {
            "$ref": "#/components/schemas/IdKey"
          },
          "encryptedData": {
            "type": "string",
            "format": "byte",
            "description": "PGP encrypted base64 encoded string. Contains CVV.\n* **CVV (Card Verification Number)**: Three or four digit security code. REQUIRED'\n",
            "example": "UHVibGljS2V5QmFzZTY0RW5jb2RlZA=="
          },
          "expMonth": {
            "$ref": "#/components/schemas/CardExpMonth"
          },
          "expYear": {
            "$ref": "#/components/schemas/CardExpYear"
          }
        }
      },
      "BankAddress": {
        "type": "object",
        "description": "The address details for the bank, as provided during bank account creation.",
        "required": [
          "country"
        ],
        "properties": {
          "bankName": {
            "type": "string",
            "description": "Name of the bank. This property is required for bank accounts outside of the US that do not support IBAN'",
            "maxLength": 35,
            "example": "SAN FRANCISCO"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address. This property is required for bank accounts outside of the US.",
            "maxLength": 35,
            "example": "SAN FRANCISCO"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          },
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 35,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 35,
            "example": "Suite 1"
          },
          "district": {
            "type": "string",
            "description": "State / County / Province / Region portion of the address. US and Canada use the two-letter code for the subdivision.",
            "maxLength": 16,
            "example": "CA"
          }
        }
      },
      "Wire": {
        "type": "object",
        "required": [
          "id",
          "status",
          "description",
          "trackingRef",
          "fingerprint",
          "billingDetails",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFiatAccountStatus"
          },
          "description": {
            "type": "string",
            "description": "Bank name plus last four digits of the bank account number or IBAN.",
            "example": "WELLS FARGO BANK, NA ****0010"
          },
          "trackingRef": {
            "type": "string",
            "description": "Wire tracking ref that needs to be set in the wire reference to beneficiary field.",
            "example": "CIR13FB13A"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/BankAddress"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "WireCreationRequestUs": {
        "type": "object",
        "title": "US Bank Account",
        "description": "Relevant fields for U.S. bank accounts.",
        "required": [
          "idempotencyKey",
          "accountNumber",
          "routingNumber",
          "billingDetails",
          "bankAddress"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "accountNumber": {
            "description": "Account number that identifies the bank account.",
            "type": "string",
            "example": "12340010",
            "minLength": 6,
            "maxLength": 35
          },
          "routingNumber": {
            "description": "ABA routing number for the bank account. Note this has to be specific for bank wire transfers.",
            "type": "string",
            "example": "121000248"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/BankAddress"
          }
        }
      },
      "BankAddressIbanSupported": {
        "type": "object",
        "description": "The address of the bank. City and country fields are required.",
        "required": [
          "city",
          "country"
        ],
        "properties": {
          "bankName": {
            "type": "string",
            "description": "Name of the bank. This property is required for bank accounts outside of the US that do not support IBAN'",
            "maxLength": 35,
            "example": "SAN FRANCISCO"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address. This property is required for bank accounts outside of the US.",
            "maxLength": 1024,
            "example": "SAN FRANCISCO"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          },
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 35,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 35,
            "example": "Suite 1"
          },
          "district": {
            "type": "string",
            "description": "State / County / Province / Region portion of the address. US and Canada use the two-letter code for the subdivision.",
            "maxLength": 16,
            "example": "CA"
          }
        }
      },
      "WireCreationRequestIban": {
        "type": "object",
        "title": "Non US Bank Account - IBAN Supported",
        "description": "Relevant fields for non-U.S. bank accounts that support IBAN.",
        "required": [
          "idempotencyKey",
          "iban",
          "billingDetails",
          "bankAddress"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "iban": {
            "description": "International Bank Account Number (IBAN) for the bank account.",
            "type": "string",
            "example": "DE31100400480532013000"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/BankAddressIbanSupported"
          }
        }
      },
      "BankAddressNonIban": {
        "type": "object",
        "description": "The address of the bank. BankName, City and Country fields are required.",
        "required": [
          "bankName",
          "city",
          "country"
        ],
        "properties": {
          "bankName": {
            "type": "string",
            "description": "Name of the bank. This property is required for bank accounts outside of the US that do not support IBAN'",
            "maxLength": 35,
            "example": "SAN FRANCISCO"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address. This property is required for bank accounts outside of the US.",
            "maxLength": 1024,
            "example": "SAN FRANCISCO"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          },
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 35,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 35,
            "example": "Suite 1"
          },
          "district": {
            "type": "string",
            "description": "State / County / Province / Region portion of the address. US and Canada use the two-letter code for the subdivision.",
            "maxLength": 16,
            "example": "CA"
          }
        }
      },
      "WireCreationRequestAccountNumber": {
        "type": "object",
        "title": "Non US Bank Account - IBAN Not Supported",
        "description": "Relevant fields for non-U.S. banks that do NOT support IBAN.",
        "required": [
          "idempotencyKey",
          "accountNumber",
          "routingNumber",
          "billingDetails",
          "bankAddress"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "accountNumber": {
            "description": "Account number that identifies the bank account.",
            "type": "string",
            "example": "0321800123",
            "minLength": 6,
            "maxLength": 35
          },
          "routingNumber": {
            "description": "The bank's SWIFT / BIC code.",
            "type": "string",
            "example": "SBININBB354"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/BankAddressNonIban"
          }
        }
      },
      "WireCreationRequest": {
        "type": "object",
        "description": "Request object used to create a bank account (wires). Different fields are required depending on the bank country, see the guide documentation for the list of supported bank countries along with which ones support IBAN.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/WireCreationRequestUs"
          },
          {
            "$ref": "#/components/schemas/WireCreationRequestIban"
          },
          {
            "$ref": "#/components/schemas/WireCreationRequestAccountNumber"
          }
        ]
      },
      "WireInstructionBeneficiary": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the beneficiary.",
            "example": "CIRCLE INTERNET FINANCIAL INC"
          },
          "address1": {
            "type": "string",
            "description": "Address line 1 of the beneficiary's address.",
            "example": "99 HIGH STREET"
          },
          "address2": {
            "type": "string",
            "description": "Address line 2 of the beneficiary's address.",
            "example": "BOSTON MA 02110"
          }
        }
      },
      "WireInstructionBeneficiaryBank": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the beneficiary's bank.",
            "example": "SILVERGATE BANK"
          },
          "swiftCode": {
            "type": "string",
            "description": "SWIFT code of the beneficiary's bank account.",
            "example": "SIVGUS66XXX"
          },
          "routingNumber": {
            "type": "string",
            "description": "ABA Routing number of the beneficiary's bank account.",
            "example": "322286803"
          },
          "accountNumber": {
            "type": "string",
            "description": "Account number of the beneficiary's bank account.",
            "example": "****7427"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the beneficiary's bank account.",
            "example": "USD"
          },
          "address": {
            "type": "string",
            "description": "Address of the beneficiary's bank.",
            "example": "4250 EXECUTIVE SQUARE SUITE 300"
          },
          "city": {
            "type": "string",
            "description": "City of the beneficiary's bank.",
            "example": "LA JOLLA"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the beneficiary's bank.",
            "example": "02110"
          },
          "country": {
            "type": "string",
            "description": "Country code of the beneficiary's bank. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "example": "US"
          }
        }
      },
      "WireInstruction": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the wire reference field.",
            "example": "CIR13FB13A"
          },
          "beneficiary": {
            "$ref": "#/components/schemas/WireInstructionBeneficiary"
          },
          "beneficiaryBank": {
            "$ref": "#/components/schemas/WireInstructionBeneficiaryBank"
          }
        }
      },
      "SenFiatAccountResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "description",
          "trackingRef",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFiatAccountStatus"
          },
          "description": {
            "type": "string",
            "description": "Bank name plus last four digits of the bank account number.",
            "example": "SILVERGATE BANK ****1111"
          },
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the memo field..",
            "example": "CIR13FB14A"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the fiat account.",
            "example": "USD"
          }
        }
      },
      "SenFiatAccountCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "accountNumber"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "accountNumber": {
            "type": "string",
            "description": "Silvergate SEN account number.",
            "example": "12345678"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the Silvergate SEN account.",
            "example": "USD"
          }
        }
      },
      "SenInstruction": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the memo field.",
            "example": "CIR13FB14A"
          },
          "accountNumber": {
            "type": "string",
            "description": "Circle corporate Silvergate SEN account number that needs to be set as destination.",
            "example": "11111111"
          },
          "currency": {
            "type": "string",
            "description": "Currency of Circle corporate Silvergate SEN account.",
            "example": "USD"
          }
        }
      },
      "AchBillingDetails": {
        "type": "object",
        "description": "Billing details of the account holder.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name of the card or bank account holder.",
            "maxLength": 1024,
            "example": "Satoshi Nakamoto"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address.",
            "maxLength": 1024,
            "example": "Boston"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          },
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 1024,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 1024,
            "example": "Suite 1"
          },
          "district": {
            "type": "string",
            "description": "State / County / Province / Region portion of the address. If the country is US or Canada, then district is required and should use the two-letter code for the subdivision.",
            "maxLength": 16,
            "example": "MA"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal / ZIP code of the address.",
            "maxLength": 16,
            "example": "01234"
          }
        }
      },
      "AchAccountType": {
        "type": "string",
        "description": "Retail account (individual consumer account) or Business account (e.g. sole prop, LLC, corporation).",
        "nullable": true,
        "enum": [
          "retail",
          "business"
        ]
      },
      "AchCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "plaidProcessorToken",
          "billingDetails",
          "metadata"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "plaidProcessorToken": {
            "type": "string",
            "description": "The token for the ACH account provided by the processor (Plaid).",
            "example": "processor-sandbox-circle-82cf95bb-43f8-4191-8d30-2c9f42853621"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/AchBillingDetails"
          },
          "bankAccountType": {
            "$ref": "#/components/schemas/AchAccountType"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataCardAndAch"
          }
        }
      },
      "AccountNumberMasked": {
        "type": "string",
        "description": "The redacted account number of the ACH account.",
        "example": "****6789"
      },
      "RoutingNumber": {
        "type": "string",
        "description": "The routing number of the ACH account.",
        "example": "613334455"
      },
      "AchVerificationErrorCodes": {
        "type": "string",
        "description": "Indicates the failure reason of the ACH account. Only present on failed accounts. Possible values are [bank_account_authorization_expired, bank_account_error, bank_account_ineligible, bank_account_not_found, bank_account_unauthorized, unsupported_routing_number, verification_failed].",
        "nullable": true,
        "enum": [
          "bank_account_authorization_expired",
          "bank_account_error",
          "bank_account_ineligible",
          "bank_account_not_found",
          "bank_account_unauthorized",
          "unsupported_routing_number",
          "verification_failed"
        ]
      },
      "Ach": {
        "type": "object",
        "required": [
          "id",
          "accountNumber",
          "routingNumber",
          "description",
          "billingDetails",
          "bankAddress",
          "fingerprint",
          "metadata",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFiatAccountStatus"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/AccountNumberMasked"
          },
          "routingNumber": {
            "$ref": "#/components/schemas/RoutingNumber"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/AchBillingDetails"
          },
          "bankAccountType": {
            "$ref": "#/components/schemas/AchAccountType"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/BankAddress"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          },
          "errorCode": {
            "$ref": "#/components/schemas/AchVerificationErrorCodes"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataPhoneEmail"
          }
        }
      },
      "SepaCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "accountName",
          "iban",
          "billingDetails"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "iban": {
            "type": "string",
            "description": "International Bank Account Number (IBAN) for the bank account.",
            "example": "DE31100400480532013000"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          }
        }
      },
      "Sepa": {
        "type": "object",
        "required": [
          "id",
          "status",
          "description",
          "trackingRef",
          "fingerprint",
          "billingDetails",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFiatAccountStatus"
          },
          "description": {
            "type": "string",
            "description": "Bank name plus last four digits of the IBAN.",
            "example": "Bank of Ireland ****0010"
          },
          "trackingRef": {
            "type": "string",
            "description": "Tracking reference that needs to be set in the payment details or description.",
            "example": "CIR13FB13A"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "SepaInstructionBeneficiary": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the beneficiary.",
            "example": "CIRCLE INTERNET FINANCIAL INC"
          },
          "address1": {
            "type": "string",
            "description": "Address line 1 of the beneficiary's address.",
            "example": "99 HIGH STREET"
          },
          "address2": {
            "type": "string",
            "description": "Address line 2 of the beneficiary's address.",
            "example": "BOSTON MA 02110"
          }
        }
      },
      "SepaInstructionBeneficiaryBank": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the beneficiary's bank.",
            "example": "LHV Bank"
          },
          "bic": {
            "type": "string",
            "description": "BIC code of the beneficiary's bank account.",
            "example": "LHVBEE22XXX"
          },
          "iban": {
            "description": "IBAN of the beneficiary's bank account.",
            "type": "string",
            "example": "****6789"
          },
          "address": {
            "description": "Address of the beneficiary's bank.",
            "type": "string",
            "example": "Tartu mnt 2, 10145 Tallinn"
          },
          "city": {
            "description": "City of the beneficiary's bank.",
            "type": "string",
            "example": "Tallinn"
          },
          "postalCode": {
            "description": "Postal code of the beneficiary's bank.",
            "type": "string",
            "example": "10017"
          },
          "country": {
            "description": "Country code of the beneficiary's bank. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "type": "string",
            "example": "EE"
          }
        }
      },
      "SepaInstruction": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the SEPA transfer reference field.",
            "example": "CIR13FB13A"
          },
          "beneficiary": {
            "$ref": "#/components/schemas/SepaInstructionBeneficiary"
          },
          "beneficiaryBank": {
            "$ref": "#/components/schemas/SepaInstructionBeneficiaryBank"
          }
        }
      },
      "SignetFiatAccountResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "trackingRef",
          "walletAddress",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFiatAccountStatus"
          },
          "trackingRef": {
            "type": "string",
            "description": "Tracking ref that needs to be set in the public description field when you send the funds to Circle Signet wallet.",
            "example": "CIR13FB14A"
          },
          "walletAddress": {
            "type": "string",
            "description": "Your signet wallet address.",
            "example": "0xcac04f0069e4ac9314ac4e608e99278a3bebabcd"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "SignetFiatAccountCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "walletAddress"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "walletAddress": {
            "type": "string",
            "description": "Signet wallet address.",
            "example": "0xcac04f0069e4ac9314ac4e608e99278a3bebabcd"
          }
        }
      },
      "SignetInstruction": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the signet public description field.",
            "example": "CIR13FB14A"
          },
          "walletAddress": {
            "type": "string",
            "description": "Circle wallet address that needs to be set in the signet recipient wallet field.",
            "example": "0x7e4f4fe03243ac7b291ebaee90b2bb27025a1234"
          }
        }
      },
      "Address": {
        "type": "string",
        "description": "An alphanumeric string representing a blockchain address. Will be in different formats for different chains. It is important to preserve the exact formatting and capitalization of the address.",
        "example": "0x8381470ED67C3802402dbbFa0058E8871F017A6F"
      },
      "AddressTag": {
        "type": "string",
        "description": "The secondary identifier for a blockchain address. An example of this is the memo field on the Stellar network, which can be text, id, or hash format.",
        "nullable": true,
        "example": "123456789"
      },
      "Currency": {
        "type": "string",
        "description": "A currency associated with a balance or address.",
        "nullable": true,
        "enum": [
          "USD",
          "EUR",
          "BTC",
          "ETH"
        ]
      },
      "AddressObject": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        }
      },
      "BusinessGenerateAddressRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "currency",
          "chain"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        }
      },
      "AddressDescription": {
        "type": "string",
        "description": "An identifier or sentence that describes the recipient.",
        "example": "My USDC address at a cryptocurrency exchange"
      },
      "BusinessRecipientAddressObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "description": {
            "$ref": "#/components/schemas/AddressDescription"
          }
        }
      },
      "BusinessRecipientAddressCreationRequest": {
        "type": "object",
        "description": "Adds a recipient address. The currency parameter will default to USD for all chains except for BTC where it defaults to BTC.",
        "required": [
          "idempotencyKey",
          "address",
          "chain",
          "description"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "description": {
            "$ref": "#/components/schemas/AddressDescription"
          }
        }
      },
      "WalletLocation": {
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wallet"
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of the wallet.",
            "example": "12345"
          }
        }
      },
      "FiatMoney": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "description": "Magnitude of the amount, in units of the currency, with a `.`.",
            "type": "string",
            "example": "3.14"
          },
          "currency": {
            "description": "Currency code.",
            "type": "string",
            "enum": [
              "USD",
              "EUR"
            ]
          }
        }
      },
      "FiatMoneyUsd": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "description": "Magnitude of the amount, in units of the currency, with a `.`.",
            "type": "string",
            "example": "3.14"
          },
          "currency": {
            "description": "Currency code.",
            "type": "string",
            "enum": [
              "USD"
            ]
          }
        }
      },
      "BusinessDeposit": {
        "type": "object",
        "description": "A deposit",
        "required": [
          "id",
          "destination",
          "amount",
          "status",
          "createDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "sourceWalletId": {
            "type": "string",
            "description": "The identifier for the bank account where the funds were deposited from.",
            "format": "uuid",
            "example": "9b57048d-2365-4ff5-956b-0199170d1035"
          },
          "destination": {
            "$ref": "#/components/schemas/WalletLocation"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoney"
          },
          "fee": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "status": {
            "type": "string",
            "description": "Status of the deposit. Status `pending` indicates that the deposit is in the process of running; `complete` indicates it finished successfully; `failed` indicates it failed.",
            "enum": [
              "pending",
              "complete",
              "failed"
            ]
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "CryptoPaymentsMoney": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "description": "Magnitude of the amount, in units of the currency, with a `.`.",
            "type": "string",
            "example": "3.14"
          },
          "currency": {
            "description": "Currency code.",
            "type": "string",
            "enum": [
              "USD",
              "ETH",
              "BTC"
            ]
          }
        }
      },
      "PaymentMethodBlockchain": {
        "type": "object",
        "required": [
          "type",
          "chain"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "blockchain"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "address": {
            "type": "string",
            "readOnly": true,
            "example": "0x8381470ED67C3802402dbbFa0058E8871F017A6F"
          }
        }
      },
      "PaymentIntentFees": {
        "type": "object",
        "readOnly": true,
        "required": [
          "type",
          "amount",
          "currency"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "blockchainLeaseFee",
              "totalPaymentFees"
            ]
          },
          "amount": {
            "description": "Magnitude of the amount, in units of the currency, with a `.`.",
            "type": "string",
            "example": "3.14"
          },
          "currency": {
            "description": "Currency code.",
            "type": "string",
            "enum": [
              "USD"
            ]
          }
        }
      },
      "Timeline": {
        "type": "object",
        "readOnly": true,
        "required": [
          "status",
          "time"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "created",
              "pending",
              "complete",
              "expired",
              "failed"
            ]
          },
          "context": {
            "type": "string",
            "enum": [
              "underpaid",
              "paid",
              "overpaid"
            ]
          },
          "time": {
            "description": "ISO-8601 UTC date/time format.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UtcTimestampReadOnly": {
        "type": "string",
        "readOnly": true,
        "description": "ISO-8601 UTC date/time format.",
        "example": "2020-04-10T02:13:30.000Z"
      },
      "PaymentIntent": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "amount",
          "settlementCurrency",
          "paymentMethods"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique system generated identifier for the entity.",
            "format": "uuid",
            "example": "b8627ae8-732b-4d25-b947-1df8f4007a29"
          },
          "amount": {
            "$ref": "#/components/schemas/CryptoPaymentsMoney"
          },
          "amountPaid": {
            "description": "Sum of the the amount paid.",
            "type": "object",
            "readOnly": true,
            "required": [
              "amount",
              "currency"
            ],
            "properties": {
              "amount": {
                "description": "Magnitude of the amount, in units of the currency, with a `.`.",
                "type": "string",
                "example": "3.14"
              },
              "currency": {
                "description": "Currency code.",
                "type": "string",
                "enum": [
                  "USD"
                ]
              }
            }
          },
          "settlementCurrency": {
            "description": "Desired currency for the payments to settle in.",
            "type": "string",
            "enum": [
              "USD",
              "BTC",
              "ETH"
            ]
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodBlockchain"
            }
          },
          "fees": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PaymentIntentFees"
            }
          },
          "paymentIds": {
            "description": "List of associated payments.",
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "69808f36-3e5e-4f37-bf82-ca79e4d70fc1"
            }
          },
          "timeline": {
            "description": "State management timeline.",
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Timeline"
            }
          },
          "expiresOn": {
            "$ref": "#/components/schemas/UtcTimestampReadOnly"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestampReadOnly"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestampReadOnly"
          }
        }
      },
      "IdMerchant": {
        "type": "string",
        "description": "Unique system generated identifier for the merchant.",
        "format": "uuid",
        "example": "fc988ed5-c129-4f70-a064-e5beb7eb8e32"
      },
      "SourceResponse": {
        "type": "object",
        "description": "The payment source.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "description": "Type of the source.",
            "enum": [
              "card",
              "ach",
              "wire",
              "sepa"
            ]
          }
        }
      },
      "PaymentStatus": {
        "type": "string",
        "description": "Enumerated status of the payment. `pending` means the payment is waiting to be processed. `confirmed` means the payment has been approved by the bank and the merchant can treat it as successful, but settlement funds are not yet available to the merchant.  `paid` means settlement funds have been received and are available to the merchant. `failed` means something went wrong (most commonly that the payment was denied). `action_required` means that additional steps are required to process this payment; refer to `requiredAction` for more details. Terminal states are `paid` and `failed`.",
        "enum": [
          "pending",
          "confirmed",
          "paid",
          "failed",
          "action_required"
        ]
      },
      "RequiredAction": {
        "type": "object",
        "description": "When the payment status is `action_required`, this object summarizes the required additional steps.",
        "required": [
          "type",
          "redirectUrl"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of action that is required to proceed with the payment. Currently only one type is supported.",
            "enum": [
              "three_d_secure_required"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "description": "The URL to bring the user to in order to complete the payment.",
            "example": "https://example.org"
          }
        }
      },
      "CancelRefundReversalStatus": {
        "type": "string",
        "enum": [
          "pending",
          "confirmed",
          "paid",
          "failed"
        ],
        "description": "Enumerated status of the payment. `pending` means the payment is waiting to be processed. `confirmed` means the payment has been approved by the bank and the merchant can treat it as successful, but settlement funds are not yet available to the merchant.  `paid` means settlement funds have been received and are available to the merchant. `failed` means something went wrong (most commonly that the payment was denied). Terminal states are `paid` and `failed`."
      },
      "PaymentInfoCancel": {
        "type": "object",
        "description": "Status information of the related cancel. This property is only present on canceled payment or refund items.",
        "nullable": true,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "description": "Type of the payment object.",
            "enum": [
              "cancel"
            ]
          },
          "description": {
            "description": "Enumerated description of the payment item.",
            "type": "string",
            "nullable": true,
            "enum": [
              "Payment"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/CancelRefundReversalStatus"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "PaymentInfoPaymentAndRefund": {
        "type": "object",
        "description": "Status information of the related payment. This property is only present on refund or cancel items.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "description": "Type of the payment object.",
            "enum": [
              "payment",
              "refund"
            ]
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "description": {
            "type": "string",
            "description": "Enumerated description of the payment item.",
            "nullable": true,
            "enum": [
              "Payment"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "requiredAction": {
            "$ref": "#/components/schemas/RequiredAction"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "Channel": {
        "type": "string",
        "format": "uuid",
        "description": "The channel identifier that can be set for the payment. When not provided, the default channel is used.",
        "example": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7"
      },
      "FiatPayment": {
        "type": "object",
        "description": "Status information of the related payment. This property is only present on refund or cancel items.",
        "required": [
          "id",
          "type",
          "merchantId",
          "amount",
          "source",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "description": "Type of the payment object.",
            "type": "string",
            "enum": [
              "payment"
            ]
          },
          "merchantId": {
            "$ref": "#/components/schemas/IdMerchant"
          },
          "merchantWalletId": {
            "$ref": "#/components/schemas/MerchantWalletId"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "source": {
            "$ref": "#/components/schemas/SourceResponse"
          },
          "description": {
            "description": "Enumerated description of the payment.",
            "type": "string",
            "enum": [
              "Payment"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "captured": {
            "description": "Determines if a payment has successfully been captured. This property is only present for payments that did not use auto capture.",
            "type": "boolean"
          },
          "captureAmount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "captureDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "requiredAction": {
            "$ref": "#/components/schemas/RequiredAction"
          },
          "cancel": {
            "$ref": "#/components/schemas/PaymentInfoCancel"
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentInfoPaymentAndRefund"
            }
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "CryptoPayment": {
        "type": "object",
        "description": "Status information of the related payment. This property is only present on refund or cancel items.",
        "required": [
          "id",
          "type",
          "merchantId",
          "amount",
          "source",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "description": "Type of the payment object.",
            "type": "string",
            "enum": [
              "payment"
            ]
          },
          "merchantId": {
            "$ref": "#/components/schemas/IdMerchant"
          },
          "merchantWalletId": {
            "$ref": "#/components/schemas/MerchantWalletId"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "paymentIntentId": {
            "type": "string",
            "format": "uuid",
            "example": "6e4d4047-db14-4c09-b238-1215aee50d03"
          },
          "settlementAmount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "depositAddress": {
            "type": "object",
            "properties": {
              "chain": {
                "$ref": "#/components/schemas/Chain"
              },
              "address": {
                "type": "string",
                "example": "0x97de855690955e0da79ce5c1b6804847e7070c7f"
              }
            }
          },
          "transactionHash": {
            "type": "string",
            "example": "0x7351585460bd657f320b9afa02a52c26d89272d0d10cc29913eb8b28e64fd906"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "FiatCancel": {
        "type": "object",
        "description": "Status information of the related cancel. This property is only present on canceled payment or refund items.",
        "nullable": true,
        "required": [
          "id",
          "type",
          "merchantId",
          "amount",
          "source",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "description": "Type of the payment object.",
            "enum": [
              "cancel"
            ]
          },
          "merchantId": {
            "$ref": "#/components/schemas/IdMerchant"
          },
          "merchantWalletId": {
            "$ref": "#/components/schemas/MerchantWalletId"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "source": {
            "$ref": "#/components/schemas/SourceResponse"
          },
          "description": {
            "description": "Enumerated description of the payment.",
            "type": "string",
            "enum": [
              "Payment"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/CancelRefundReversalStatus"
          },
          "originalPayment": {
            "$ref": "#/components/schemas/PaymentInfoPaymentAndRefund"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "FiatRefund": {
        "type": "object",
        "required": [
          "id",
          "type",
          "merchantId",
          "amount",
          "source",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "description": "Type of the payment object.",
            "type": "string",
            "enum": [
              "refund"
            ]
          },
          "merchantId": {
            "$ref": "#/components/schemas/IdMerchant"
          },
          "merchantWalletId": {
            "$ref": "#/components/schemas/MerchantWalletId"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "source": {
            "$ref": "#/components/schemas/SourceResponse"
          },
          "description": {
            "description": "Enumerated description of the payment.",
            "type": "string",
            "enum": [
              "Payment"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/CancelRefundReversalStatus"
          },
          "originalPayment": {
            "$ref": "#/components/schemas/PaymentInfoPaymentAndRefund"
          },
          "cancel": {
            "$ref": "#/components/schemas/PaymentInfoCancel"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "MetadataPayment": {
        "type": "object",
        "required": [
          "email",
          "sessionId",
          "ipAddress"
        ],
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "sessionId": {
            "$ref": "#/components/schemas/SessionId"
          },
          "ipAddress": {
            "$ref": "#/components/schemas/IpAddress"
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "type": "string",
            "description": "Type of the source.",
            "enum": [
              "card",
              "ach"
            ]
          }
        }
      },
      "PaymentCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "amount",
          "verification",
          "source",
          "metadata"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "keyId": {
            "$ref": "#/components/schemas/IdKey"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataPayment"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "autoCapture": {
            "type": "boolean",
            "description": "Triggers the automatic capture of the full payment amount. If set to false the payment will only be authorized but not captured.",
            "default": true,
            "example": true
          },
          "verification": {
            "type": "string",
            "description": "Indicates the verification method for this payment.",
            "enum": [
              "none",
              "cvv",
              "three_d_secure"
            ]
          },
          "verificationSuccessUrl": {
            "type": "string",
            "description": "The URL to redirect users to after successful 3DS authentication.",
            "format": "url",
            "example": "https://www.example.com/3ds/verificationsuccessful"
          },
          "verificationFailureUrl": {
            "type": "string",
            "description": "The URL to redirect users to after failed 3DS authentication.",
            "format": "url",
            "example": "https://www.example.com/3ds/verificationfailure"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "description": {
            "type": "string",
            "description": "Description of the payment with length restriction of 240 characters.",
            "example": "Payment"
          },
          "encryptedData": {
            "type": "string",
            "format": "byte",
            "description": "PGP encrypted base64 encoded string. Contains CVV.\n* **CVV (Card Verification Number)**: Three or four digit security code. Only required if `verification` is `cvv`.\n",
            "example": "UHVibGljS2V5QmFzZTY0RW5jb2RlZA=="
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          }
        }
      },
      "ThreeDsResult": {
        "type": "string",
        "description": "Enumerated status of the check. `pass` indicates successful 3DS authentication. `fail` indicates failed 3DS authentication.",
        "enum": [
          "pass",
          "fail"
        ]
      },
      "Eci": {
        "type": "string",
        "description": "ECI (electronic commerce indicator) value returned by Directory Servers (namely Visa, MasterCard, JCB, and American Express) indicating the outcome of authentication attempted on transactions enforced by 3DS.",
        "enum": [
          "00",
          "01",
          "02",
          "05",
          "06",
          "07"
        ]
      },
      "PaymentVerificationResponse": {
        "type": "object",
        "description": "Indicates the status of the payment verification. This property will be present once the payment is confirmed.",
        "required": [
          "avs",
          "cvv"
        ],
        "properties": {
          "avs": {
            "$ref": "#/components/schemas/AvsResults"
          },
          "cvv": {
            "$ref": "#/components/schemas/CvvResults"
          },
          "threeDSecure": {
            "$ref": "#/components/schemas/ThreeDsResult"
          },
          "eci": {
            "$ref": "#/components/schemas/Eci"
          }
        }
      },
      "PaymentErrorCode": {
        "type": "string",
        "description": "Indicates the failure reason of a payment. Only present for payments in failed state. Possible values are [`payment_failed`, `payment_fraud_detected`, `payment_denied`, `payment_not_supported_by_issuer`, `payment_not_funded`, `payment_unprocessable`, `payment_stopped_by_issuer`, `payment_canceled`, `payment_returned`, `payment_failed_balance_check`, `card_failed`, `card_invalid`, `card_address_mismatch`, `card_zip_mismatch`, `card_cvv_invalid`, `card_expired`, `card_limit_violated`, `card_not_honored`, `card_cvv_required`, `credit_card_not_allowed`, `card_account_ineligible`, `card_network_unsupported`, `channel_invalid`, `unauthorized_transaction`, `bank_account_ineligible`, `bank_transaction_error`, `invalid_account_number`, `invalid_wire_rtn`, `invalid_ach_rtn`, `vendor_inactive`]'",
        "nullable": true,
        "enum": [
          "payment_failed",
          "payment_fraud_detected",
          "payment_denied",
          "payment_not_supported_by_issuer",
          "payment_not_funded",
          "payment_unprocessable",
          "payment_stopped_by_issuer",
          "payment_canceled",
          "payment_returned",
          "payment_failed_balance_check",
          "card_failed",
          "card_invalid",
          "card_address_mismatch",
          "card_zip_mismatch",
          "card_cvv_invalid",
          "card_expired",
          "card_limit_violated",
          "card_not_honored",
          "card_cvv_required",
          "card_restricted,",
          "card_account_ineligible",
          "card_network_unsupported",
          "channel_invalid",
          "unauthorized_transaction",
          "bank_account_ineligible",
          "bank_transaction_error",
          "invalid_account_number",
          "invalid_wire_rtn",
          "invalid_ach_rtn",
          "ref_id_invalid",
          "account_name_mismatch",
          "account_number_mismatch",
          "account_ineligible",
          "wallet_address_mismatch",
          "customer_name_mismatch",
          "institution_name_mismatch",
          "vendor_inactive"
        ]
      },
      "DetailedPayment": {
        "type": "object",
        "required": [
          "id",
          "type",
          "merchantId",
          "amount",
          "source",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "description": "Type of the payment object.",
            "type": "string",
            "enum": [
              "payment"
            ]
          },
          "merchantId": {
            "$ref": "#/components/schemas/IdMerchant"
          },
          "merchantWalletId": {
            "$ref": "#/components/schemas/MerchantWalletId"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "source": {
            "$ref": "#/components/schemas/SourceResponse"
          },
          "description": {
            "type": "string",
            "description": "Enumerated description of the payment.",
            "enum": [
              "Payment"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "captured": {
            "type": "boolean",
            "description": "Determines if a payment has successfully been captured. This property is only present for payments that did not use auto capture."
          },
          "captureAmount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "captureDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "requiredAction": {
            "$ref": "#/components/schemas/RequiredAction"
          },
          "verification": {
            "$ref": "#/components/schemas/PaymentVerificationResponse"
          },
          "cancel": {
            "$ref": "#/components/schemas/FiatCancel"
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FiatRefund"
            }
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "trackingRef": {
            "description": "Payment tracking reference. Will be present once known.",
            "type": "string",
            "nullable": true,
            "example": "24910599141085313498894"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PaymentErrorCode",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataPhoneEmail"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "ExternalRef": {
        "type": "string",
        "description": "External network identifier which will be present once provided from the applicable network. \n\nExamples:\n* **Input/Output Message Accountability Data (IMAD/OMAD)**: unique number given to each FedWire payment when using the Federal Reserve Bank Service which can be used to investigate and track wire transfers.\n",
        "example": "YYYYMMDDXXXXXXXX012345"
      },
      "FiatPaymentPolymorphic": {
        "type": "object",
        "required": [
          "id",
          "type",
          "merchantId",
          "amount",
          "source",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "description": "Type of the payment object.",
            "type": "string",
            "enum": [
              "payment",
              "refund",
              "cancel"
            ]
          },
          "merchantId": {
            "$ref": "#/components/schemas/IdMerchant"
          },
          "merchantWalletId": {
            "$ref": "#/components/schemas/MerchantWalletId"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "source": {
            "$ref": "#/components/schemas/SourceResponse"
          },
          "description": {
            "description": "Enumerated description of the payment.",
            "type": "string",
            "enum": [
              "Payment"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "requiredAction": {
            "$ref": "#/components/schemas/RequiredAction"
          },
          "verification": {
            "$ref": "#/components/schemas/PaymentVerificationResponse"
          },
          "originalPayment": {
            "$ref": "#/components/schemas/FiatPayment"
          },
          "cancel": {
            "$ref": "#/components/schemas/FiatCancel"
          },
          "refunds": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FiatRefund"
            }
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "trackingRef": {
            "description": "Payment tracking reference. Will be present once known.",
            "type": "string",
            "nullable": true,
            "example": "24910599141085313498894"
          },
          "externalRef": {
            "$ref": "#/components/schemas/ExternalRef"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PaymentErrorCode"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataPhoneEmail"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "CaptureCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          }
        }
      },
      "ReversalReason": {
        "type": "string",
        "description": "Enumerated reason for a returned payment. Providing this reason in the request is recommended (to improve risk evaluation) but not required.",
        "enum": [
          "duplicate",
          "fraudulent",
          "requested_by_customer",
          "bank_transaction_error",
          "invalid_account_number",
          "insufficient_funds",
          "payment_stopped_by_issuer",
          "payment_returned",
          "bank_account_ineligible",
          "invalid_ach_rtn",
          "unauthorized_transaction",
          "payment_failed"
        ]
      },
      "CancelCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "reason": {
            "$ref": "#/components/schemas/ReversalReason"
          }
        }
      },
      "DetailedCancel": {
        "type": "object",
        "required": [
          "id",
          "type",
          "merchantId",
          "amount",
          "source",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "description": "Type of the payment object.",
            "type": "string",
            "enum": [
              "cancel"
            ]
          },
          "merchantId": {
            "$ref": "#/components/schemas/IdMerchant"
          },
          "merchantWalletId": {
            "$ref": "#/components/schemas/MerchantWalletId"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "source": {
            "$ref": "#/components/schemas/SourceResponse"
          },
          "description": {
            "description": "Enumerated description of the payment.",
            "type": "string",
            "enum": [
              "Payment"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/CancelRefundReversalStatus"
          },
          "originalPayment": {
            "$ref": "#/components/schemas/FiatPayment"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "trackingRef": {
            "description": "Payment tracking reference. Will be present once known.",
            "type": "string",
            "nullable": true,
            "example": "24910599141085313498894"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PaymentErrorCode"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataPhoneEmail"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "refund": {
            "description": "If the cancel was made after a cutoff time period, it will be processed as a refund. This flag indicates that the cancel was processed as a refund'",
            "type": "boolean",
            "default": false
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "RefundCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "amount"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "reason": {
            "$ref": "#/components/schemas/ReversalReason"
          }
        }
      },
      "DetailedRefund": {
        "type": "object",
        "required": [
          "id",
          "type",
          "merchantId",
          "amount",
          "source",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "type": {
            "description": "Type of the payment object.",
            "type": "string",
            "enum": [
              "refund"
            ]
          },
          "merchantId": {
            "$ref": "#/components/schemas/IdMerchant"
          },
          "merchantWalletId": {
            "$ref": "#/components/schemas/MerchantWalletId"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "source": {
            "$ref": "#/components/schemas/SourceResponse"
          },
          "description": {
            "description": "Enumerated description of the payment.",
            "type": "string",
            "enum": [
              "Payment"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/CancelRefundReversalStatus"
          },
          "originalPayment": {
            "$ref": "#/components/schemas/FiatPayment"
          },
          "cancel": {
            "$ref": "#/components/schemas/FiatCancel"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "trackingRef": {
            "description": "Payment tracking reference. Will be present once known.",
            "type": "string",
            "nullable": true,
            "example": "24910599141085313498894"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PaymentErrorCode"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataPhoneEmail"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "PayoutStatus": {
        "type": "string",
        "description": "Status of the payout. Status `pending` indicates that the payout is in process; `complete` indicates it finished successfully; `failed` indicates it failed.",
        "enum": [
          "pending",
          "complete",
          "failed"
        ]
      },
      "PayoutDestinationType": {
        "type": "string",
        "description": "The destination bank account type.",
        "enum": [
          "wire",
          "ach",
          "sepa"
        ]
      },
      "BankDestination": {
        "type": "object",
        "description": "The destination bank account.",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PayoutDestinationType"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "name": {
            "type": "string",
            "description": "Bank name plus last four digits of the bank account number or IBAN.",
            "readOnly": true,
            "example": "COMMERZBANK AG ****3000"
          }
        }
      },
      "PayoutErrorCode": {
        "type": "string",
        "nullable": true,
        "description": "Indicates the failure reason of a payout. Only present for payouts in failed state. Possible values are [`insufficient_funds`, `transaction_denied`, `transaction_failed`, `transaction_returned`, `bank_transaction_error`, `fiat_account_limit_exceeded`, `invalid_bank_account_number`, `invalid_ach_rtn`, `invalid_wire_rtn`, `vendor_inactive`]'",
        "enum": [
          "insufficient_funds",
          "transaction_denied",
          "transaction_failed",
          "transaction_returned",
          "bank_transaction_error",
          "fiat_account_limit_exceeded",
          "invalid_bank_account_number",
          "invalid_ach_rtn",
          "invalid_wire_rtn",
          "vendor_inactive"
        ]
      },
      "FinalAdjustments": {
        "type": "object",
        "description": "Final adjustment which increases (credits) or decreases (debits) the total returned amount to the source wallet.",
        "nullable": true,
        "properties": {
          "fxCredit": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "fxDebit": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          }
        }
      },
      "IdPayout": {
        "type": "string",
        "description": "Universally unique identifier (UUID v4) of the payout that is associated with the return.",
        "format": "uuid",
        "example": "abdb500d-4a59-457c-801f-2d418c8703ac"
      },
      "UnwithdrawalObject": {
        "type": "object",
        "description": "Return information if the payout is returned by bank. Only present if `errorCode` of payout is `transaction_returned`.",
        "nullable": true,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "payoutId": {
            "$ref": "#/components/schemas/IdPayout"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "reason": {
            "type": "string",
            "description": "Reason for the return.",
            "example": "payout_returned"
          },
          "status": {
            "type": "string",
            "description": "Status of the return. A `pending` status indicates that the return is in process; `complete` indicates it finished successfully; `failed` indicates it failed.",
            "enum": [
              "pending",
              "complete",
              "failed"
            ]
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "BusinessPayout": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "sourceWalletId": {
            "type": "string",
            "description": "The identifier of the source wallet used to fund a payout.",
            "example": "53535335"
          },
          "destination": {
            "$ref": "#/components/schemas/BankDestination"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoney"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus"
          },
          "trackingRef": {
            "description": "A payout tracking reference. Will be present once known.",
            "nullable": true,
            "example": "CIR-6ESOQANEP3NAO"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PayoutErrorCode"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "adjustments": {
            "$ref": "#/components/schemas/FinalAdjustments"
          },
          "return": {
            "$ref": "#/components/schemas/UnwithdrawalObject"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "BusinessDestinationRequest": {
        "type": "object",
        "description": "The destination bank account.",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wire",
              "sen"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "BusinessPayoutCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "destination",
          "amount"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "destination": {
            "$ref": "#/components/schemas/BusinessDestinationRequest"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoney"
          }
        }
      },
      "Payout": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "sourceWalletId": {
            "type": "string",
            "description": "The identifier of the source wallet used to fund a payout.",
            "example": "53535335"
          },
          "destination": {
            "$ref": "#/components/schemas/BankDestination"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus"
          },
          "trackingRef": {
            "description": "A payout tracking reference. Will be present once known.",
            "nullable": true,
            "example": "CIR-6ESOQANEP3NAO"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PayoutErrorCode"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "adjustments": {
            "$ref": "#/components/schemas/FinalAdjustments"
          },
          "return": {
            "$ref": "#/components/schemas/UnwithdrawalObject"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "MetadataPayout": {
        "type": "object",
        "description": "Additional properties related to the payout beneficiary.",
        "required": [
          "beneficiaryEmail"
        ],
        "properties": {
          "beneficiaryEmail": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "PayoutCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "destination",
          "amount",
          "metadata"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "source": {
            "$ref": "#/components/schemas/WalletLocation"
          },
          "destination": {
            "$ref": "#/components/schemas/BankDestination"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataPayout"
          }
        }
      },
      "DetailedPayout": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "sourceWalletId": {
            "description": "The identifier of the source wallet used to fund a payout.",
            "type": "string",
            "example": "53535335"
          },
          "destination": {
            "$ref": "#/components/schemas/BankDestination"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "status": {
            "description": "Status of the payout. Status `pending` indicates that the payout is in process; `complete` indicates it finished successfully; `failed` indicates it failed.",
            "type": "string",
            "enum": [
              "pending",
              "complete",
              "failed"
            ]
          },
          "trackingRef": {
            "description": "A payout tracking reference. Will be present once known.",
            "nullable": true,
            "example": "CIR-6ESOQANEP3NAO"
          },
          "externalRef": {
            "$ref": "#/components/schemas/ExternalRef"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PayoutErrorCode"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "adjustments": {
            "$ref": "#/components/schemas/FinalAdjustments"
          },
          "return": {
            "$ref": "#/components/schemas/UnwithdrawalObject"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "Settlement": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "merchantWalletId": {
            "$ref": "#/components/schemas/MerchantWalletId"
          },
          "walletId": {
            "description": "If this settlement was used for a marketplace payment, the wallet involved in the settlement. Not included for standard merchant settlements.",
            "type": "string",
            "example": "12345"
          },
          "totalDebits": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "totalCredits": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "paymentFees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "chargebackFees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "IdPayment": {
        "type": "string",
        "description": "Unique system generated identifier for the payment that is associated to the chargeback item.",
        "format": "uuid",
        "example": "fc988ed5-c129-4f70-a064-e5beb7eb8e32"
      },
      "ChargebackCategories": {
        "type": "string",
        "description": "Enumerated category of the chargeback status codes based on the chargeback status code.",
        "enum": [
          "Canceled Recurring Payment",
          "Customer Dispute",
          "Fraudulent",
          "General",
          "Processing Error",
          "Not Defined"
        ]
      },
      "IdSettlement": {
        "type": "string",
        "description": "Unique system generated identifier for the settlement related to the chargeback history.",
        "format": "uuid",
        "nullable": true,
        "example": "fc988ed5-c129-4f70-a064-e5beb7eb8e32"
      },
      "BasicChargebackHistory": {
        "type": "object",
        "required": [
          "type",
          "chargebackAmount",
          "description"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Enumerated type of the chargeback history event. `1st Chargeback` represents the first stage of the dispute procedure initiated by the cardholder’s issuing bank.\n  `2nd Chargeback` represents the second stage of the dispute procedure initiated by the cardholder’s issuing bank (This stage is MasterCard only).\n  `Chargeback Reversal` represents when 1st Chargeback or 2nd Chargeback is withdrawn by the issuer.\n  `Representment` represents the stage when merchants decided to dispute 1st Chargeback or 2nd Chargeback.\n  `Chargeback Settlement` can imply one of the two: 1) If merchant or marketplace is taking the lost of the chargeback, money will be debit from the wallet during this stage.\n  2) If merchant of marketplace successfully dispute the chargeback, money will be credit back to the wallet during this stage.\n",
            "enum": [
              "1st Chargeback",
              "2nd Chargeback",
              "Chargeback Reversal",
              "Representment",
              "Chargeback Settlement"
            ]
          },
          "chargebackAmount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "fee": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "description": {
            "type": "string",
            "description": "The reason the chargeback was created.",
            "example": "The cardholder claims an unauthorized transaction occurred."
          },
          "settlementId": {
            "$ref": "#/components/schemas/IdSettlement"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "BasicChargeback": {
        "type": "object",
        "required": [
          "id",
          "paymentId",
          "merchantId",
          "history",
          "reasonCode"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "paymentId": {
            "$ref": "#/components/schemas/IdPayment"
          },
          "merchantId": {
            "$ref": "#/components/schemas/IdMerchant"
          },
          "reasonCode": {
            "description": "Reason code given by the card network for the chargeback item.",
            "type": "string",
            "example": "10.4"
          },
          "category": {
            "$ref": "#/components/schemas/ChargebackCategories"
          },
          "history": {
            "type": "array",
            "description": "The chargeback item's history list will be sorted by create date descending: more recent chargeback statuses will be at the beginning of the list.\n",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/BasicChargebackHistory"
            }
          }
        }
      },
      "Reversal": {
        "type": "object",
        "required": [
          "id",
          "paymentId",
          "amount",
          "description",
          "status",
          "reason",
          "fees",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/IdKey"
          },
          "paymentId": {
            "$ref": "#/components/schemas/IdPayment"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "description": {
            "type": "string",
            "description": "Enumerated description of the payment.",
            "example": "Merchant Payment Reversal"
          },
          "status": {
            "$ref": "#/components/schemas/CancelRefundReversalStatus"
          },
          "reason": {
            "$ref": "#/components/schemas/ReversalReason"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "Wallet": {
        "type": "object",
        "properties": {
          "walletId": {
            "type": "string",
            "description": "Wallet identifier. Numeric value but should be treated as a string as format may change in the future'",
            "example": "434000"
          },
          "entityId": {
            "type": "string",
            "description": "Universally unique identifier (UUID v4) of the entity that owns the wallet.",
            "example": "fc988ed5-c129-4f70-a064-e5beb7eb8e32"
          },
          "type": {
            "type": "string",
            "description": "Wallet type.",
            "enum": [
              "end_user_wallet"
            ]
          },
          "description": {
            "type": "string",
            "description": "A human-friendly, non-unique identifier for a wallet.",
            "example": "Treasury Wallet",
            "maxLength": 255
          },
          "balances": {
            "description": "A list of balances for currencies owned by the wallet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Money"
            }
          }
        }
      },
      "WalletCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "description": {
            "type": "string",
            "description": "A human-friendly, non-unique identifier for a wallet.",
            "example": "Treasury Wallet",
            "maxLength": 255
          }
        }
      },
      "GenerateAddressRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "currency",
          "chain"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        }
      },
      "IdentityAddress": {
        "type": "object",
        "required": [
          "line1",
          "city",
          "district",
          "postalCode",
          "country"
        ],
        "properties": {
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 1024,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 1024,
            "example": "Suite 1"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address.",
            "maxLength": 1024,
            "example": "Boston"
          },
          "district": {
            "description": "State / County / Province / Region portion of the address. If the country is US or Canada, then district is required and should use the two-letter code for the subdivision.",
            "type": "string",
            "maxLength": 16,
            "example": "MA"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal / ZIP code of the address.",
            "maxLength": 16,
            "example": "01234"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          }
        }
      },
      "Identity": {
        "type": "object",
        "description": "The identity of the originator. Identities are required when:\n  * `destination.type: \"blockchain\"`\n  * `destination.chain: \"ETH\"`\n  * `amount.amount` >= $3,000 in value\n",
        "required": [
          "type",
          "name",
          "addresses"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of identity for the originator.\n* `individual` - A uniquely distinguishable individual.\n* `business` - Any entity other than a natural person that can establish a permanent customer relationship with an affected entity or otherwise own property. This can include companies, foundations, anstalt, partnerships, associations and other relevantly similar entities.\n",
            "enum": [
              "individual",
              "business"
            ]
          },
          "name": {
            "type": "string",
            "description": "Full name of the identity.",
            "example": "Satoshi Nakamoto",
            "maxLength": 1024
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityAddress"
            }
          }
        }
      },
      "TransferSourceWalletLocation": {
        "description": "A source wallet location.",
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wallet"
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of the wallet.",
            "example": "12345"
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identity"
            }
          }
        }
      },
      "TransferSourceBlockchainLocation": {
        "description": "A source blockchain address.",
        "type": "object",
        "required": [
          "type",
          "chain"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "blockchain"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identity"
            }
          }
        }
      },
      "TransferSourceLocation": {
        "description": "A source of funds.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TransferSourceWalletLocation"
          },
          {
            "$ref": "#/components/schemas/TransferSourceBlockchainLocation"
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TransferDestinationBlockchainLocation": {
        "description": "A destination blockchain address.",
        "type": "object",
        "required": [
          "type",
          "chain",
          "address"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "blockchain"
            ]
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        }
      },
      "TransferDestinationWalletLocation": {
        "description": "A destination wallet location.",
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wallet"
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of the wallet.",
            "example": "12345"
          },
          "address": {
            "type": "string",
            "description": "An alphanumeric string which indicates the wallet address used to receive the transfer. Will only be set when the transfer source is a blockchain address.",
            "example": "0x8381470ED67C3802402dbbFa0058E8871F017A6F"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          }
        }
      },
      "TransferDestinationLocation": {
        "description": "A destination of funds.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TransferDestinationBlockchainLocation"
          },
          {
            "$ref": "#/components/schemas/TransferDestinationWalletLocation"
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Fee": {
        "type": "object",
        "required": [
          "amount",
          "currency",
          "type"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Magnitude of the fee amount, in units of the currency, with a `.`.",
            "example": "10.00"
          },
          "currency": {
            "type": "string",
            "description": "Currency code for the amount.",
            "enum": [
              "USD"
            ]
          },
          "type": {
            "type": "string",
            "description": "Category of the fee.",
            "enum": [
              "network"
            ]
          }
        }
      },
      "TransferErrorCode": {
        "type": "string",
        "description": "Indicates the failure reason of a transfer. Only present for transfers in a `failed` state. Possible values are `insufficient_funds`, `blockchain_error` and `transfer_denied` and `transfer_failed`",
        "nullable": true,
        "enum": [
          "transfer_failed",
          "transfer_denied",
          "blockchain_error",
          "insufficient_funds"
        ]
      },
      "Transfer": {
        "type": "object",
        "description": "A transfer of funds.",
        "required": [
          "id",
          "source",
          "destination",
          "amount",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "source": {
            "$ref": "#/components/schemas/TransferSourceLocation"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferDestinationLocation"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "fees": {
            "description": "An array of fees applied to a transaction. This is only available when there is at least one non-zero fee.",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            }
          },
          "transactionHash": {
            "description": "A hash that uniquely identifies the onchain transaction. This is only available where either source or destination are of type blockchain.",
            "type": "string",
            "example": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63"
          },
          "status": {
            "description": "Status of the transfer. Status `pending` indicates that the transfer is in the process of running; `complete` indicates it finished successfully; `failed` indicates it failed.",
            "type": "string",
            "enum": [
              "pending",
              "complete",
              "failed"
            ]
          },
          "errorCode": {
            "$ref": "#/components/schemas/TransferErrorCode"
          },
          "createDate": {
            "description": "The create date of the transfer.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TransferRequestVerifiedBlockchainLocation": {
        "type": "object",
        "required": [
          "type",
          "addressId"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "verified_blockchain"
            ]
          },
          "addressId": {
            "type": "string",
            "description": "The ID of the verified blockchain recipient address.",
            "example": "f1f36b85-cafe-484e-a46b-02340bfdb927",
            "format": "uuid"
          }
        }
      },
      "BusinessTransferCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "destination",
          "amount"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferRequestVerifiedBlockchainLocation"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          }
        }
      },
      "TransferRequestSourceWalletLocation": {
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wallet"
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of the wallet.",
            "example": "12345"
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identity"
            }
          }
        }
      },
      "TransferRequestBlockchainLocation": {
        "type": "object",
        "required": [
          "type",
          "address",
          "chain"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "blockchain"
            ]
          },
          "address": {
            "type": "string",
            "description": "The blockchain address.",
            "example": "0x8381470ED67C3802402dbbFa0058E8871F017A6F"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        }
      },
      "TransferCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "source",
          "destination",
          "amount"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "source": {
            "$ref": "#/components/schemas/TransferRequestSourceWalletLocation"
          },
          "destination": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferRequestBlockchainLocation"
              },
              {
                "$ref": "#/components/schemas/WalletLocation"
              }
            ]
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          }
        }
      },
      "TransferDetailedTransfer": {
        "type": "object",
        "description": "A transfer of funds.",
        "required": [
          "id",
          "source",
          "destination",
          "amount",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "source": {
            "$ref": "#/components/schemas/TransferSourceLocation"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferDestinationLocation"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "fees": {
            "description": "An array of fees applied to a transaction. This is only available when there is at least one non-zero fee.",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            }
          },
          "transactionHash": {
            "type": "string",
            "description": "A hash that uniquely identifies the onchain transaction. This is only available where either source or destination are of type blockchain.",
            "example": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63"
          },
          "status": {
            "type": "string",
            "description": "Status of the transfer. Status `pending` indicates that the transfer is in the process of running; `complete` indicates it finished successfully; `failed` indicates it failed.",
            "enum": [
              "failed",
              "pending",
              "complete"
            ]
          },
          "errorCode": {
            "$ref": "#/components/schemas/TransferErrorCode"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "createDate": {
            "$ref": "#/components/schemas/UtcTimestamp"
          }
        }
      },
      "MockChargebackCreationRequest": {
        "type": "object",
        "required": [
          "paymentId"
        ],
        "properties": {
          "paymentId": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the payment to be charged back.  Each payment can only be charged back once.",
            "example": "fc988ed5-c129-4f70-a064-e5beb7eb8e32"
          }
        }
      },
      "MockChargeback": {
        "type": "object",
        "properties": {}
      },
      "MockSenPaymentBeneficiaryBankInstruction": {
        "type": "object",
        "required": [
          "accountNumber"
        ],
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Circle corporate Silvergate SEN account number that needs to be set as destination.",
            "example": "11111111"
          }
        }
      },
      "MockSenPaymentRequest": {
        "type": "object",
        "required": [
          "trackingRef",
          "amount",
          "beneficiaryBank"
        ],
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the memo filed. This field is retrievable through the response during SEN account creation or via the bank instruction endpoint.",
            "example": "CIR13FB13A"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoney"
          },
          "beneficiaryBank": {
            "$ref": "#/components/schemas/MockSenPaymentBeneficiaryBankInstruction"
          }
        }
      },
      "MockSenPaymentResponse": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Wire tracking reference that needs to be set in the wire reference to beneficiary field. This field is retrievable through the response during wire creation or via the bank instruction endpoint.",
            "example": "CIR13FB13A"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "beneficiaryBank": {
            "$ref": "#/components/schemas/MockSenPaymentBeneficiaryBankInstruction"
          },
          "status": {
            "type": "string",
            "description": "Enumerated status of the wire payment. Status `pending` indicates that the wire payment is in process; `processed` indicates it finished successfully; `failed` indicates it failed.",
            "enum": [
              "pending",
              "processed",
              "failed"
            ]
          }
        }
      },
      "MockAchAccount": {
        "type": "object",
        "required": [
          "accountNumber",
          "routingNumber",
          "description"
        ],
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "The account number of the ACH account.",
            "example": "123456789"
          },
          "routingNumber": {
            "type": "string",
            "description": "The routing number of the ACH account.\n\nFor sandbox testing, valid routing numbers include `011000028`, `011201762`, `011500120`, `021214862`, `121000248`, `121140399`, `211073473`, `221172610`, and `011000138`.\n",
            "example": "011000028"
          },
          "description": {
            "type": "string",
            "description": "A description for the ACH account.",
            "example": "My ACH account"
          }
        }
      },
      "MockAchAccountCreationRequest": {
        "type": "object",
        "required": [
          "account",
          "balance"
        ],
        "properties": {
          "account": {
            "$ref": "#/components/schemas/MockAchAccount"
          },
          "balance": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          }
        }
      },
      "MockAchAccountResponse": {
        "type": "object",
        "properties": {
          "processorToken": {
            "type": "string",
            "description": "The processor token needs to be provided when linking an ACH account against this mock.",
            "example": "processor-sandbox-circle-82cf95bb-43f8-4191-8d30-2c9f42853621"
          },
          "balance": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "account": {
            "$ref": "#/components/schemas/MockAchAccount"
          }
        }
      },
      "MockWirePaymentBeneficiaryBankInstruction": {
        "type": "object",
        "required": [
          "accountNumber"
        ],
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Virtual account number or Circle corporate Silvergate Wire account number that needs to be set as destination.",
            "example": "11111111"
          }
        }
      },
      "MockWirePaymentRequest": {
        "type": "object",
        "required": [
          "trackingRef",
          "amount",
          "beneficiaryBank"
        ],
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Wire tracking reference that needs to be set in the wire reference to beneficiary field. This field is retrievable through the response during wire creation or via the bank instruction endpoint.",
            "example": "CIR13FB13A"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "beneficiaryBank": {
            "$ref": "#/components/schemas/MockWirePaymentBeneficiaryBankInstruction"
          }
        }
      },
      "MockWirePaymentResponse": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Wire tracking reference that needs to be set in the wire reference to beneficiary field. This field is retrievable through the response during wire creation or via the bank instruction endpoint.",
            "example": "CIR13FB13A"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "beneficiaryBank": {
            "$ref": "#/components/schemas/MockWirePaymentBeneficiaryBankInstruction"
          },
          "status": {
            "type": "string",
            "description": "Enumerated status of the wire payment. Status `pending` indicates that the wire payment is in process; `processed` indicates it finished successfully; `failed` indicates it failed.",
            "enum": [
              "pending",
              "processed",
              "failed"
            ]
          }
        }
      },
      "MockSepaPaymentRequest": {
        "type": "object",
        "required": [
          "trackingRef",
          "amount"
        ],
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "SEPA tracking reference that needs to be set in the payment details or description.",
            "example": "CIR13FB13A"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          }
        }
      },
      "MockSepaPaymentResponse": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "SEPA tracking reference that needs to be set in the payment details or description.",
            "example": "CIR13FB13A"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "status": {
            "type": "string",
            "description": "Enumerated status of the SEPA payment. Status `pending` indicates that the SEPA payment is in process; `processed` indicates it finished successfully; `failed` indicates it failed.",
            "enum": [
              "pending",
              "processed",
              "failed"
            ]
          }
        }
      }
    },
    "headers": {
      "XRequestId": {
        "description": "Universally unique identifier (UUID v4) for the request. Helpful for identifying a request when communicating with Circle support.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "2adba88e-9d63-44bc-b975-9b6ae3440dde"
        }
      }
    },
    "responses": {
      "NotAuthorized": {
        "description": "The request has not been applied because it lacks valid authentication credentials.",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/XRequestId"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "NotAuthorized",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong."
                }
              },
              "example": {
                "code": 401,
                "message": "Malformed authorization."
              }
            },
            "examples": {
              "response": {
                "value": {
                  "code": 401,
                  "message": "Malformed authorization."
                }
              }
            }
          }
        }
      },
      "BadRequest": {
        "description": "The request cannot be processed due to a client error.",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/XRequestId"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "BadRequest",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong."
                }
              },
              "example": {
                "code": 400,
                "message": "Bad request."
              }
            },
            "examples": {
              "response": {
                "value": {
                  "code": 400,
                  "message": "Bad request."
                }
              }
            }
          }
        }
      },
      "LimitExceeded": {
        "description": "Limit exceeded. See error message for more details.",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/XRequestId"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "LimitExceeded",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong."
                }
              },
              "example": {
                "code": 429,
                "message": "Too many requests."
              }
            },
            "examples": {
              "response": {
                "value": {
                  "code": 429,
                  "message": "Too many requests."
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found.",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/XRequestId"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "NotFound",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong."
                }
              },
              "example": {
                "code": 404,
                "message": "Not found."
              }
            },
            "examples": {
              "response": {
                "value": {
                  "code": 404,
                  "message": "Not found."
                }
              }
            }
          }
        }
      },
      "Conflict": {
        "description": "The request has not been applied because it comes in conflict with another request (such as re-using an idempotencyKey for a different request).",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/XRequestId"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Conflict",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong."
                }
              },
              "example": {
                "code": 409,
                "message": "Conflicts with another request."
              }
            },
            "examples": {
              "response": {
                "value": {
                  "code": 409,
                  "message": "Conflicts with another request."
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "IdPath": {
        "name": "id",
        "description": "Universally unique identifier (UUID v4) of a resource.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "b3d9d2d5-4c12-4946-a09d-953e82fae2b0"
        }
      },
      "PageBefore": {
        "name": "pageBefore",
        "description": "A collection ID value used for pagination.\n\nIt marks the exclusive end of a page. When provided, the collection resource will return the next `n` items before\nthe id, with `n` being specified by `pageSize`.\n\nThe items will be returned in the natural order of the collection.\n\nThe resource will return the first page if neither `pageAfter` nor `pageBefore` are specified.\n\nSHOULD NOT be used in conjuction with pageAfter.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "PageAfter": {
        "name": "pageAfter",
        "description": "A collection ID value used for pagination.\n\nIt marks the exclusive begin of a page. When provided, the collection resource will return the next `n` items after\nthe id, with `n` being specified by `pageSize`.\n\nThe items will be returned in the natural order of the collection.\n\nThe resource will return the first page if neither `pageAfter` nor `pageBefore` are specified.\n\nSHOULD NOT be used in conjuction with pageBefore.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "PageSize": {
        "name": "pageSize",
        "description": "Limits the number of items to be returned.\n\nSome collections have a strict upper bound that will disregard this value. In case the specified value is higher\nthan the allowed limit, the collection limit will be used.\n\nIf avoided, the collection will determine the page size itself.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "example": 5
        }
      },
      "Currency": {
        "name": "currency",
        "description": "Queries beneficiary bank account currency. Default is USD.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "USD",
            "EUR"
          ]
        }
      },
      "From": {
        "name": "from",
        "description": "Queries items created since the specified date-time (inclusive).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2020-04-10T02:13:30.000Z"
        }
      },
      "To": {
        "name": "to",
        "description": "Queries items created before the specified date-time (inclusive).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2020-04-10T02:13:30.000Z"
        }
      },
      "Source": {
        "name": "source",
        "description": "Universally unique identifier (UUID v4) for the source. Filters results to fetch only payments made from the provdided source.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "b3d9d2d5-4c12-4946-a09d-953e82fae2b0"
        }
      },
      "SettlementId": {
        "name": "settlementId",
        "description": "Queries items with the specified settlement id. Matches any settlement id if unspecified.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "b48c8962-8e9f-40c3-9f1d-d9adde2ffe61"
        }
      },
      "PaymentIntentId": {
        "name": "paymentIntentId",
        "description": "Queries items with the specified payment intent id.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "b48c8962-8e9f-40c3-9f1d-d9adde2ffe61"
        }
      },
      "PaymentSourceType": {
        "name": "type",
        "description": "Source account type. Filters the results to fetch all payments made from a specified account type. Matches any source type if unspecified.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "card",
              "wire",
              "ach",
              "sepa"
            ]
          }
        }
      },
      "PaymentStatus": {
        "name": "status",
        "description": "Queries items with the specified status. Matches any status if unspecified.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "pending",
            "confirmed",
            "paid",
            "failed",
            "action_required"
          ]
        }
      },
      "Destination": {
        "name": "destination",
        "description": "Universally unique identifier (UUID v4) for the destination bank account. Filters the results to fetch all payouts made to a destination bank account.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "e3d0a838-d732-49d0-bf44-73a668e38973"
        }
      },
      "PaymentId": {
        "name": "paymentId",
        "description": "The payment ID associated with the chargeback.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "202ad9ce-974c-49ca-8d34-3afb7d7247ae"
        }
      },
      "WalletId": {
        "name": "walletId",
        "description": "Identifier for the wallet.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "0123456789"
        }
      },
      "ReturnIdentities": {
        "name": "returnIdentities",
        "description": "Specify if you would like to see identities in the response. Restricts maximum returned items to 5. By default returnIdentities is false, resulting in the response not returning `data.source.identities`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "example": "true",
          "default": false
        }
      }
    }
  }
}