on:
  workflow_dispatch:
  push:
    branches: [openapi-doc-update-regen]

env:
  README_FILE: README.md    # Needed to extract codegen command
  OPENAPI_VER_FILE: OPENAPI_VERSION
  OPENAPI_FILE: sdk.json

name: Create Release

jobs:
  regenerate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

      - run: yarn install --frozen-lockfile

      - name: Read openapi document
        id: read-openapi-doc
        run: |
          content=`cat $OPENAPI_FILE`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=doc::$content"

      - name: Extract new version
        id: extract-new-ver
        run: echo "::set-output name=version::${{ fromJson(steps.read-openapi-doc.outputs.doc).info.version }}"      


      # Regenerate SDK code
      - name: Extract codegen command from README.md
        id: extract-codegen-cmd
        run: |
          i=0
          cmd_start_ln=-1
          codegen_cmd=""

          while read p; do
              if [[ $p == openapi-generator-cli* ]]
              then
                  cmd_start_ln=$i
                  codegen_cmd=$p
                  continue
              fi

              if [[ $cmd_start_ln -gt -1 ]]
              then
                  if [[ $p == "\`\`\`" ]]
                  then
                      break
                  fi
                  codegen_cmd="$codegen_cmd\n$p"
              fi
              ((i=i+1))
          done < $README_FILE

          codegen_cmd=$(echo $codegen_cmd | sed 's/\${version}/${{ steps.extract-new-ver.outputs.version }}/g')
          echo "::set-output name=cmd::$codegen_cmd"

      - name: Regenerate SDK code
        run: npx ${{ steps.extract-codegen-cmd.outputs.cmd }}


      # Create PR with updated code
      - name: Get Conventional Commits format commit message prefix
        id: get-conven-commit-pref
        run: |
          NEW_VERSION=${{ steps.extract-new-ver.outputs.version }}
          OLD_VERSION=$(cat $OPENAPI_VER_FILE)

          IFS='.' read -ra OLD_VER_PARTS <<< $OLD_VERSION
          IFS='.' read -ra NEW_VER_PARTS <<< $NEW_VERSION

          # Conventional Commits commit prefixes for major, minor, and patch bumps
          CONVEN_COMM_PREFS=("feat!" "feat" "fix")
          COMMIT_PREF=""

          for i in $(seq 0 2); do 
              if (( ${OLD_VER_PARTS[$i]} != ${NEW_VER_PARTS[$i]} ))
              then
                  COMMIT_PREF=${CONVEN_COMM_PREFS[$i]}
                  break
              fi
          done

          echo "::set-output name=commit-pref::$COMMIT_PREF"

      - name: Create pull request
        uses: peter-evans/create-pull-request@v4
        with:
          base: master
          branch: openapi-update-regen-pr-v${{ steps.extract-new-ver.outputs.version }}
          title: Regenerate code from OpenAPI document v${{ steps.extract-new-ver.outputs.version }}
          commit-message: "${{ steps.get-conven-commit-pref.outputs.commit-pref }}: regen code openapi doc v${{ steps.extract-new-ver.outputs.version }}"
          body: |
            Automated pull request by GitHub action following Circle OpenAPI document update. 
            SDK Code generated using [OpenAPI generator](https://openapi-generator.tech/) 